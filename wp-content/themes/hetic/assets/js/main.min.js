'use strict'
function _classCallCheck (e, t) {if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function')}
function _classCallCheck (e, t) {if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function')}
function _classCallCheck (e, t) {if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function')}
function _classCallCheck (e, t) {if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function')}
function _classCallCheck (e, t) {if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function')}
var Exhibitions = function e () {
  _classCallCheck(this, e)
  document.querySelector('#exhibitions') && new Vue({
    el: '#exhibitions',
    data: {
      years: [],
      activeYear: 2014,
      article: {title: '', content: '', photos: [], video: []},
      exhibitions: [],
      loaderArticle: !1,
      loaderHeight: '400px'
    },
    mounted: function () {this.loaderArticle = !0, this.getYears()},
    methods: {
      getYears: function () {
        var e = this, t = new FormData
        t.append('action', 'get_years'), axios.post('' + ajaxurl, t).then(function (t) {e.years = t.data, e.setActiveYear(e.years[0].name), e.loaderArticle = !1}).catch(function (e) {console.log(e)})
      }, getExhibitions: function () {
        var e = this, t = new FormData
        t.append('action', 'get_exhibitions'), t.append('year', this.activeYear), axios.post('' + ajaxurl, t).then(function (t) {e.exhibitions = t.data, t.data.length > 0 ? (e.article.title = t.data[0].post_title, e.article.content = t.data[0].content, e.article.photos = t.data[0].photos, e.article.video = t.data[0].video, t.data[0].video && setTimeout(function () {new Player(document.querySelector('#video-e'))}, 100), t.data[0].photos && setTimeout(function () {new Slider(document.querySelector('.slider-e'))}, 100)) : (e.article.title = '', e.article.content = '', e.article.photos = [], e.article.video = [])}).catch(function (e) {console.log(e)})
      }, getArticle: function (e) {
        var t = this, i = new FormData
        i.append('action', 'get_exhibition'), i.append('id', e), this.loaderArticle = !0, axios.post('' + ajaxurl, i).then(function (e) {t.article.title = e.data.post_title, t.article.content = e.data.content, t.article.photos = e.data.photos, t.article.video = e.data.video, t.loaderArticle = !1, e.data.video && setTimeout(function () {new Player(document.querySelector('#video-e'))}, 100), e.data.photos && setTimeout(function () {new Slider(document.querySelector('.slider-e'))}, 100)}).catch(function (e) {console.log(e)})
      }, setActiveYear: function (e) {this.activeYear = e, this.getExhibitions(this.activeYear)}
    }
  })
}, News = function e () {
  _classCallCheck(this, e)
  document.querySelector('#news') && new Vue({
    el: '#news',
    data: {categories: [], articles: {}, activeCategory: 'all', offset: 0, max: 0, loading: !1, loaderHeight: '400px'},
    mounted: function () {this.getCategories(), this.getArticles('all')},
    methods: {
      getCategories: function () {
        var e = this, t = new FormData
        t.append('action', 'get_news_categories'), this.loading = !0, axios.post('' + ajaxurl, t).then(function (t) {e.categories = t.data, e.loading = !1}).catch(function (e) {console.log(e)})
      },
      getArticles: function (e) {
        var t = this
        this.activeCategory = e
        var i = new FormData
        i.append('action', 'get_news'), i.append('category', e), i.append('offset', this.offset), this.loading = !0, this.loaderHeight = document.querySelector('.news-container').offsetHeight + 'px', axios.post('' + ajaxurl, i).then(function (e) {t.articles.length > 0 ? e.data[0].forEach(function (e) {t.articles.push(e)}) : t.articles = e.data[0], t.max = parseInt(e.data[1]), t.loading = !1}).catch(function (e) {console.log(e)})
      },
      changeCategory: function (e) {this.articles = [], this.offset = 0, this.getArticles(e)},
      loadMore: function () {this.offset += 8, this.getArticles(this.activeCategory)}
    }
  })
}, _createClass = function () {
  function e (e, t) {
    for (var i = 0; i < t.length; i++) {
      var s = t[i]
      s.enumerable = s.enumerable || !1, s.configurable = !0, 'value' in s && (s.writable = !0), Object.defineProperty(e, s.key, s)
    }
  }
  return function (t, i, s) {return i && e(t.prototype, i), s && e(t, s), t}
}(), Player = function () {
  function e (t) {
    var i = this, s = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
    if (_classCallCheck(this, e), this.container = t, this.button_toggle = this.container.querySelector('.section-videos-wrapper-controls--toggle'), this.video = this.container.querySelector('.section-videos-wrapper-video'), this.time_seek_bar = this.container.querySelector('.section-videos-wrapper-controls-seek-bar'), this.time_seek_bar_fill = this.time_seek_bar.querySelector('.section-videos-wrapper-controls-seek-bar--fill'), this.time_drag = !1, this.time_current = this.container.querySelector('.section-videos-wrapper-controls--time-current'), this.time_duration = this.container.querySelector('.section-videos-wrapper-controls--time-duration'), this.button_volume = this.container.querySelector('.section-videos-wrapper-controls-volume--icon'), this.volume_seek_bar = this.container.querySelector('.section-videos-wrapper-controls-volume--bar'), this.volume_seek_bar_fill = this.container.querySelector('.section-videos-wrapper-controls-volume--bar-fill'), this.volume_drag = !1, this.effect_pause = this.container.querySelector('.section-videos-wrapper-effect-pause'), this.effect_play = this.container.querySelector('.section-videos-wrapper-effect-play'), this.button_fullscreen = this.container.querySelector('.section-videos-wrapper-controls--fullscreen'), this.button_toggle.addEventListener('click', function () {i.toggleState()}), this.time_seek_bar.addEventListener('click', function (e) {i.time_positions = i.time_seek_bar.getBoundingClientRect(), i.updateTime(e)}), this.time_seek_bar.addEventListener('mousedown', function () {i.time_drag || (i.time_positions = i.time_seek_bar.getBoundingClientRect(), i.time_drag = !0)}), window.addEventListener('mouseup', function () {i.time_drag && (i.time_drag = !1), i.volume_drag && (i.volume_drag = !1)}), window.addEventListener('mousemove', function (e) {i.time_drag && i.updateTime(e), i.volume_drag && i.updateVolume(e)}), this.button_volume.addEventListener('click', function () {i.toggleMute()}), this.volume_seek_bar.addEventListener('click', function (e) {i.volume_positions = i.volume_seek_bar.getBoundingClientRect(), i.updateVolume(e)}), this.volume_seek_bar.addEventListener('mousedown', function () {i.volume_drag || (i.volume_positions = i.volume_seek_bar.getBoundingClientRect(), i.volume_drag = !0)}), this.button_fullscreen.addEventListener('click', function () {i.toggleFullscreen()}), this.video.addEventListener('dblclick', function () {i.toggleFullscreen()}), this.video.addEventListener('click', function () {i.toggleState(), i.video.paused ? (i.effect_play.classList.add('active'), i.effect_pause.classList.remove('active')) : (i.effect_pause.classList.add('active'), i.effect_play.classList.remove('active'))}), this.playlist = s, this.playlist) {
      this.container_playlist = document.querySelector('.section-videos-nav-wrapper-list'), this.playlist_items = document.querySelectorAll('.section-videos-nav-wrapper-list-item'), this.playlist_next = document.querySelector('.section-videos-nav-controls--next'), this.playlist_prev = document.querySelector('.section-videos-nav-controls--prev'), this.playlist_index = 0, this.playlist_selected = this.playlist_items[this.playlist_index], this.playlist_item_width = this.playlist_items[0].getBoundingClientRect().width + 20, this.video_index = 0, this.video_prev = this.container.querySelector('.section-videos-wrapper-controls--skip-prev'), this.video_next = this.container.querySelector('.section-videos-wrapper-controls--skip-next'), this.playlist_next.addEventListener('click', function () {i.playlist_index < i.playlist_items.length - i.playlist_size && (i.playlist_index++, i.updatePlaylist())}), this.playlist_prev.addEventListener('click', function () {i.playlist_index > 0 && (i.playlist_index--, i.updatePlaylist())})
      for (var n = function () {
        var e = i
        i.playlist_items[o].addEventListener('click', function () {this != e.playlist_selected && (e.video_index = Array.prototype.indexOf.call(e.playlist_items, this), e.selectVideo())})
      }, o = 0; o < this.playlist_items.length; o++) n();
      this.video_prev.addEventListener('click', function () {i.video_index > 0 ? (i.video_index--, i.selectVideo()) : (i.video_prev.classList.add('hide'), console.log('nop prev')), i.video_next.classList.remove('hide')}), this.video_next.addEventListener('click', function () {i.video_index < i.playlist_items.length - 1 ? (i.video_index++, i.selectVideo()) : (i.video_next.classList.add('hide'), console.log('nop next')), i.video_prev.classList.remove('hide')}), this.video.addEventListener('ended', function () {i.video_index < i.playlist_items.length - 1 && (i.video_index++, i.selectVideo())}), window.addEventListener('resize', function () {i.playlist_item_width = i.playlist_items[0].getBoundingClientRect().width + 20, i.playlist && (i.initPlaylist())}), this.initPlaylist()
    }
    this.init()
  }
  return _createClass(e, [{
    key: 'init', value: function () {
      var e = this
      this.container.classList.remove('playing'), this.effect_pause.classList.remove('active'), this.effect_play.classList.remove('active'), this.video.addEventListener('loadeddata', function () {e.video.currentTime = .45, e.time_duration.textContent = e.formatTime(e.video.duration), e.time_current.textContent = e.formatTime(e.video.currentTime), e.time_seek_bar_fill.style.transform = 'scaleX(0)'})
    }
  }, {
    key: 'initPlaylist', value: function () {
      var e = window.innerWidth
      this.playlist_size = e < 425 ? 1 : e < 650 ? 2 : e < 900 ? 3 : e < 1300 ? 5 : e < 2500 ? 6 : 9, this.playlist_index = 0, this.updatePlaylist()
    }
  }, {
    key: 'toggleState',
    value: function () {this.video.paused ? (this.video.play(), this.container.classList.add('playing'), this.render()) : (this.video.pause(), this.container.classList.remove('playing')), this.effect_pause.classList.remove('active'), this.effect_play.classList.remove('active')}
  }, {
    key: 'updateTime', value: function (e) {
      var t = (e.pageX - this.time_positions.left) / this.time_positions.width
      t >= 0 && t < 1 && (this.time_seek_bar_fill.style.transform = 'scaleX(' + t + ')', this.video.currentTime = t * this.video.duration, this.time_current.textContent = this.formatTime(this.video.currentTime))
    }
  }, {
    key: 'updateVolume',
    value: function (e) {
      var t = (e.pageX - this.volume_positions.left) / this.volume_positions.width
      t >= 0 && t < 1 && (this.video.volume = t, this.volume_seek_bar_fill.style.transform = 'scaleX(' + t + ')', this.video.muted && this.toggleMute(), t >= .5 ? (this.button_volume.classList.add('volume-2'), this.button_volume.classList.remove('volume-1'), this.button_volume.classList.remove('volume-0')) : t < .5 && t >= .25 ? (this.button_volume.classList.remove('volume-2'), this.button_volume.classList.add('volume-1'), this.button_volume.classList.remove('volume-0')) : t < .25 ? (this.button_volume.classList.remove('volume-2'), this.button_volume.classList.remove('volume-1'), this.button_volume.classList.add('volume-0')) : t <= 0 && (this.button_volume.classList.remove('volume-2'), this.button_volume.classList.remove('volume-1'), this.button_volume.classList.remove('volume-0'), this.toggleMute()))
    }
  }, {
    key: 'toggleMute',
    value: function () {this.video.muted ? (this.video.muted = !1, this.button_volume.classList.remove('mute'), this.volume_seek_bar_fill.style.transform = 'scaleX(' + this.video.volume + ')') : (this.video.muted = !0, this.button_volume.classList.add('mute'), this.volume_seek_bar_fill.style.transform = 'scaleX(0)')}
  }, {
    key: 'toggleFullscreen',
    value: function () {null == document.fullscreenElement && null == document.mozFullscreenElement && null == document.webkitFullscreenElement && null == document.msFullscreenElement ? this.container.requestFullscreen ? this.container.requestFullscreen() : this.container.mozRequestFullScreen ? this.container.mozRequestFullScreen() : this.container.webkitRequestFullscreen ? this.container.webkitRequestFullscreen() : this.container.msRequestFullscreen && this.container.msRequestFullscreen() : document.exitFullscreen ? document.exitFullscreen() : document.mozExitFullScreen ? document.mozExitFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen()}
  }, {
    key: 'updatePlaylist',
    value: function () {this.container_playlist.style.transform = 'translateX(-' + this.playlist_index * this.playlist_item_width + 'px)', 0 == this.playlist_index ? this.playlist_prev.classList.add('hide') : this.playlist_prev.classList.remove('hide'), this.playlist_index >= this.playlist_items.length - this.playlist_size ? this.playlist_next.classList.add('hide') : this.playlist_next.classList.remove('hide')}
  }, {
    key: 'selectVideo',
    value: function () {
      this.playlist_selected.classList.remove('active'), this.playlist_selected = this.playlist_items[this.video_index], this.playlist_selected.classList.add('active'), this.video.src = this.playlist_selected.dataset.target, this.init(), this.video_index > this.playlist_index + this.playlist_size - 1 ? (this.playlist_index++, this.updatePlaylist()) : this.video_index < this.playlist_index && (this.playlist_index--, this.updatePlaylist()), 0 == this.video_index ? this.video_prev.classList.add('hide') : this.video_prev.classList.remove('hide'), this.video_index >= this.playlist_items.length - 1 ? this.video_next.classList.add('hide') : this.video_next.classList.remove('hide')
      this.video.addEventListener('canplay', () => {
        this.video.play()
        this.container.classList.add('playing')
        this.render()
      })
    }
  }, {
    key: 'render', value: function () {
      this.video.paused || window.requestAnimationFrame(this.render.bind(this))
      var e = this.video.currentTime / this.video.duration
      this.time_seek_bar_fill.style.transform = 'scaleX(' + e + ')', this.time_current.textContent = this.formatTime(this.video.currentTime), this.video.currentTime == this.video.duration && this.container.classList.remove('playing')
    }
  }, {
    key: 'formatTime', value: function (e) {
      e = Math.round(e)
      var t = Math.floor(e / 3600), i = Math.floor((e - 3600 * t) / 60), s = e - 3600 * t - 60 * i
      return t = t < 10 ? '0' + t : t, i = i < 10 ? '0' + i : i, s = s < 10 ? '0' + s : s, 0 != t ? t + ':' + i + ':' + s : i + ':' + s
    }
  }]), e
}(), Projects = function e () {
  _classCallCheck(this, e)
  document.querySelector('#projects') && new Vue({
    el: '#projects',
    data: {
      projects: [],
      projectsDetails: [],
      activeProject: '',
      activeProjectSlug: '',
      article: {title: '', content: '', year: '', photos: [], videos: []},
      loaderArticle: !1,
      loaderHeight: '400px'
    },
    mounted: function () {this.loaderArticle = !0, this.getProjects()},
    methods: {
      getProjects: function () {
        var e = this, t = new FormData
        t.append('action', 'get_projects_categories'), axios.post('' + ajaxurl, t).then(function (t) {e.projects = t.data, e.setActiveProject(e.projects[0].name, e.projects[0].slug), e.loaderArticle = !1}).catch(function (e) {console.log(e)})
      },
      getProjectsDetails: function () {
        var e = this, t = new FormData
        t.append('action', 'get_projects_details'), t.append('project_category', this.activeProjectSlug), axios.post('' + ajaxurl, t).then(function (t) {e.projectsDetails = t.data, t.data.length > 0 ? (e.article.title = t.data[0].post_title, e.article.content = t.data[0].content, e.article.photos = t.data[0].photos, e.article.videos = t.data[0].videos, e.article.year = t.data[0].year, t.data[0].photos && setTimeout(function () {new Slider(document.querySelector('#slider-p'))}, 90), t.data[0].videos && setTimeout(function () {new Player(document.querySelector('#video-p'), !0)}, 100)) : (e.article.title = '', e.article.content = '', e.article.year = '', e.article.photos = [], e.article.videos = [])}).catch(function (e) {console.log(e)})
      },
      getDetails: function (e) {
        var t = this, i = new FormData
        i.append('action', 'get_project_detail'), i.append('id', e), this.loaderArticle = !0, axios.post('' + ajaxurl, i).then(function (e) {t.article.title = e.data.post_title, t.article.content = e.data.content, t.article.photos = e.data.photos, t.article.videos = e.data.videos, t.article.year = e.data.year, t.loaderArticle = !1, e.data.photos && setTimeout(function () {new Slider(document.querySelector('#slider-p'))}, 90), e.data.videos && setTimeout(function () {new Player(document.querySelector('#video-p'), !0)}, 100)}).catch(function (e) {console.log(e)})
      },
      setActiveProject: function (e, t) {this.activeProject = e, this.activeProjectSlug = t, this.article.title = '', this.article.content = '', this.article.year = '', this.article.photos = [], this.article.videos = [], this.getProjectsDetails()}
    }
  })
}, _createClass = function () {
  function e (e, t) {
    for (var i = 0; i < t.length; i++) {
      var s = t[i]
      s.enumerable = s.enumerable || !1, s.configurable = !0, 'value' in s && (s.writable = !0), Object.defineProperty(e, s.key, s)
    }
  }
  return function (t, i, s) {return i && e(t.prototype, i), s && e(t, s), t}
}(), Slider = function () {
  function e (t) {
    var i = this
    _classCallCheck(this, e), this.container = t, this.items = this.container.querySelectorAll('.slider-item'), this.button_next = this.container.querySelector('.slider-next'), this.button_prev = this.container.querySelector('.slider-prev'), this.timer_fill = this.container.querySelector('.slider-timer-fill'), this.text_current = this.container.querySelector('.slider-index-current'), this.text_total = this.container.querySelector('.slider-index-total'), this.index = 0, this.stacking = 1, this.last_index = 0, this.slide_interval = 4e3, this.last_update = 0, this.need_update = !0, this.draw = !0, this.init(), this.render(), this.startInterval(), this.button_next.addEventListener('click', function () {i.clicked || (i.index < i.items.length - 1 ? i.index++ : i.index = 0, i.update())}), this.button_prev.addEventListener('click', function () {i.clicked || (i.index > 0 ? i.index-- : i.index = i.items.length - 1, i.update())})
  }
  return _createClass(e, [{
    key: 'startInterval', value: function () {
      var e = this
      this.interval = setTimeout(function () {e.button_next.click(), e.startInterval()}, this.slide_interval)
    }
  }, {
    key: 'init',
    value: function () {this.text_total.textContent = this.items.length > 9 ? this.items.length : '0' + this.items.length, this.index = 0, this.items[this.index].classList.add('active'), this.text_current.textContent = this.index + 1 > 9 ? this.index + 1 : '0' + (this.index + 1)}
  }, {
    key: 'update', value: function () {
      var e = this
      this.text_total.textContent = this.items.length > 9 ? this.items.length : '0' + this.items.length, this.text_current.textContent = this.index + 1 > 9 ? this.index + 1 : '0' + (this.index + 1), this.items[this.index].style.zIndex = this.stacking++, this.items[this.index].classList.add('active'), this.clicked = !0, this.draw = !1, this.timer_fill.classList.add('fill'), setTimeout(function () {e.items[e.last_index].classList.remove('active'), e.last_index = e.index, e.clicked = !1, clearTimeout(e.interval), e.startInterval(), e.timer_fill.classList.remove('fill'), e.need_update = !0, e.draw = !0}, 610)
    }
  }, {
    key: 'render',
    value: function (e) {
      if ((this.need_update || void 0 === this.last_update || void 0 === e) && (this.last_update = e, this.need_update = !1), (e - this.last_update) / this.slide_interval >= 1) {
        var t = (e - this.last_update) / this.slide_interval
        this.timer_fill.style.transform = 'scaleX(' + t + ')', this.last_update = e
      }
      if (this.draw) {
        var i = (e - this.last_update) / this.slide_interval
        this.timer_fill.style.transform = 'scaleX(' + i + ')'
      } else this.timer_fill.style.transform = null
      window.requestAnimationFrame(this.render.bind(this))
    }
  }]), e
}(), burger_button = document.querySelector('.header-burger'), burger_nav = document.querySelector('.header-nav')
burger_button.addEventListener('click', function () {burger_button.classList.toggle('header-burger-active'), burger_nav.classList.toggle('header-nav-expand')})
var header = document.querySelector('.header'), header_hide = !1
document.body.addEventListener('mousewheel', function (e) {!header_hide && e.deltaY < 0 && !scroll_disabled ? (header.classList.remove('hide'), header_hide = !0) : header_hide && e.deltaY > 0 && document.body.scrollTop > 80 && !scroll_disabled && (header.classList.add('hide'), header_hide = !1)})
for (var disabled_elements = document.querySelectorAll('.scroll-disable'), scroll_disabled = !1, i = 0; i < disabled_elements.length; i++) disabled_elements[i].addEventListener('mouseenter', function () {scroll_disabled = !0}), disabled_elements[i].addEventListener('mouseleave', function () {scroll_disabled = !1});
if (void 0 != document.querySelector('.section-exhibitions')) {
  !function () {
    var e = document.querySelectorAll('.section-exhibitions-container-slider-nav-list--item'),
      t = document.querySelector('.section-exhibitions-container-slider-nav-list'),
      s = document.querySelector('.section-exhibitions-container-slider-wrapper-list'),
      n = document.querySelector('.section-exhibitions-container-content-wrapper-list'), o = 0
    for (i = 0; i < e.length; i++) e[i].addEventListener('click', function () {
      var i = Array.prototype.indexOf.call(e, this)
      void 0 != e[o] && e[o].classList.remove('active'), o = i, e[i].classList.add('active'), window.innerWidth >= 900 ? (s.style.transform = 'translateX(-' + 100 * i + '%)', n.style.transform = 'translateX(-' + 100 * i + '%)') : (s.style.transform = 'translateX(-' + 100 * i + '%)', n.style.transform = 'translateX(-' + 100 * i + '%)', t.style.transform = 'translateX(-' + (i - 1) / 3 * 100 + '%)')
    })
  }()
}
if (void 0 != document.querySelector('#video-home')) var player = new Player(document.querySelector('#video-home'), !0)
if (void 0 != document.querySelector('.slider')) var slider = new Slider(document.querySelector('.slider'))
if (void 0 != document.querySelector('#instagramDate')) {
  var instagramDate = document.querySelector('#instagramDate'), d = instagramDate.getAttribute('datetime')
  instagramDate.innerText = moment(d).locale('fr').fromNow()
}
new Exhibitions, new News, new Projects
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV4aGliaXRpb25zLmpzIiwiTmV3cy5qcyIsIlBsYXllci5qcyIsIlByb2plY3RzLmpzIiwiU2xpZGVyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJFeGhpYml0aW9ucyIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJWdWUiLCJlbCIsImRhdGEiLCJ5ZWFycyIsImFjdGl2ZVllYXIiLCJhcnRpY2xlIiwidGl0bGUiLCJjb250ZW50IiwicGhvdG9zIiwidmlkZW8iLCJleGhpYml0aW9ucyIsImxvYWRlckFydGljbGUiLCJsb2FkZXJIZWlnaHQiLCJtb3VudGVkIiwiZ2V0WWVhcnMiLCJtZXRob2RzIiwiX3RoaXMiLCJmb3JtX2RhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsImF4aW9zIiwicG9zdCIsImFqYXh1cmwiLCJ0aGVuIiwicmVzIiwic2V0QWN0aXZlWWVhciIsIm5hbWUiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJnZXRFeGhpYml0aW9ucyIsIl90aGlzMiIsImxlbmd0aCIsInBvc3RfdGl0bGUiLCJzZXRUaW1lb3V0IiwiUGxheWVyIiwiU2xpZGVyIiwiZ2V0QXJ0aWNsZSIsInBvc3RJZCIsIl90aGlzMyIsInllYXIiLCJOZXdzIiwiY2F0ZWdvcmllcyIsImFydGljbGVzIiwiYWN0aXZlQ2F0ZWdvcnkiLCJvZmZzZXQiLCJtYXgiLCJsb2FkaW5nIiwiZ2V0Q2F0ZWdvcmllcyIsImdldEFydGljbGVzIiwiY2F0ZWdvcnkiLCJvZmZzZXRIZWlnaHQiLCJmb3JFYWNoIiwiZSIsInB1c2giLCJwYXJzZUludCIsImNoYW5nZUNhdGVnb3J5IiwibG9hZE1vcmUiLCJjb250YWluZXIiLCJwbGF5bGlzdCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImJ1dHRvbl90b2dnbGUiLCJ0aW1lX3NlZWtfYmFyIiwidGltZV9zZWVrX2Jhcl9maWxsIiwidGltZV9kcmFnIiwidGltZV9jdXJyZW50IiwidGltZV9kdXJhdGlvbiIsImJ1dHRvbl92b2x1bWUiLCJ2b2x1bWVfc2Vla19iYXIiLCJ2b2x1bWVfc2Vla19iYXJfZmlsbCIsInZvbHVtZV9kcmFnIiwiZWZmZWN0X3BhdXNlIiwiZWZmZWN0X3BsYXkiLCJidXR0b25fZnVsbHNjcmVlbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVTdGF0ZSIsInRpbWVfcG9zaXRpb25zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidXBkYXRlVGltZSIsIndpbmRvdyIsInVwZGF0ZVZvbHVtZSIsInRvZ2dsZU11dGUiLCJ2b2x1bWVfcG9zaXRpb25zIiwidG9nZ2xlRnVsbHNjcmVlbiIsInBhdXNlZCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImNvbnRhaW5lcl9wbGF5bGlzdCIsInBsYXlsaXN0X2l0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsInBsYXlsaXN0X25leHQiLCJwbGF5bGlzdF9wcmV2IiwicGxheWxpc3RfaW5kZXgiLCJwbGF5bGlzdF9zZWxlY3RlZCIsInBsYXlsaXN0X2l0ZW1fd2lkdGgiLCJ3aWR0aCIsInZpZGVvX2luZGV4IiwidmlkZW9fcHJldiIsInZpZGVvX25leHQiLCJwbGF5bGlzdF9zaXplIiwidXBkYXRlUGxheWxpc3QiLCJfbG9vcCIsInNlbGYiLCJpIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJpbmRleE9mIiwiY2FsbCIsInNlbGVjdFZpZGVvIiwiaW5pdFBsYXlsaXN0IiwiaW5pdCIsImN1cnJlbnRUaW1lIiwidGV4dENvbnRlbnQiLCJmb3JtYXRUaW1lIiwiZHVyYXRpb24iLCJzdHlsZSIsInRyYW5zZm9ybSIsImlubmVyV2lkdGgiLCJwbGF5IiwicmVuZGVyIiwicGF1c2UiLCJyYXRpbyIsInBhZ2VYIiwibGVmdCIsInZvbHVtZSIsIm11dGVkIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJtb3pGdWxsc2NyZWVuRWxlbWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwibXNGdWxsc2NyZWVuRWxlbWVudCIsInJlcXVlc3RGdWxsc2NyZWVuIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJleGl0RnVsbHNjcmVlbiIsIm1vekV4aXRGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwic3JjIiwiZGF0YXNldCIsInRhcmdldCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImJpbmQiLCJ0aW1lIiwiTWF0aCIsInJvdW5kIiwiaG91cnMiLCJmbG9vciIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiUHJvamVjdHMiLCJwcm9qZWN0cyIsInByb2plY3RzRGV0YWlscyIsImFjdGl2ZVByb2plY3QiLCJhY3RpdmVQcm9qZWN0U2x1ZyIsInZpZGVvcyIsImdldFByb2plY3RzIiwic2V0QWN0aXZlUHJvamVjdCIsInNsdWciLCJnZXRQcm9qZWN0c0RldGFpbHMiLCJnZXREZXRhaWxzIiwiaXRlbXMiLCJidXR0b25fbmV4dCIsImJ1dHRvbl9wcmV2IiwidGltZXJfZmlsbCIsInRleHRfY3VycmVudCIsInRleHRfdG90YWwiLCJpbmRleCIsInN0YWNraW5nIiwibGFzdF9pbmRleCIsInNsaWRlX2ludGVydmFsIiwibGFzdF91cGRhdGUiLCJuZWVkX3VwZGF0ZSIsImRyYXciLCJzdGFydEludGVydmFsIiwiY2xpY2tlZCIsInVwZGF0ZSIsImludGVydmFsIiwiY2xpY2siLCJ6SW5kZXgiLCJjbGVhclRpbWVvdXQiLCJidXJnZXJfYnV0dG9uIiwiYnVyZ2VyX25hdiIsInRvZ2dsZSIsImhlYWRlciIsImhlYWRlcl9oaWRlIiwiYm9keSIsImRlbHRhWSIsInNjcm9sbF9kaXNhYmxlZCIsInNjcm9sbFRvcCIsImRpc2FibGVkX2VsZW1lbnRzIiwiZXhoaWJpdGlvbnNfYnV0dG9uc19pdGVtIiwiZXhoaWJpdGlvbnNfYnV0dG9uc19jb250YWluZXIiLCJleGhpYml0aW9uc19saXN0X2ltZyIsImV4aGliaXRpb25zX2xpc3RfY29udGVudCIsImV4aGliaXRpb25zX2xhc3RfaW5kZXgiLCJwbGF5ZXIiLCJzbGlkZXIiLCJpbnN0YWdyYW1EYXRlIiwiZCIsImdldEF0dHJpYnV0ZSIsImlubmVyVGV4dCIsIm1vbWVudCIsImxvY2FsZSIsImZyb21Ob3ciXSwibWFwcGluZ3MiOiI2aUJBQU1BLFlBQ0osU0FBQUEsSUFBZUMsZ0JBQUFDLEtBQUFGLEdBQ09HLFNBQVNDLGNBQWMsaUJBRXpDLElBQUlDLEtBQ0ZDLEdBQUksZUFDSkMsTUFDRUMsU0FDQUMsV0FBWSxLQUNaQyxTQUNFQyxNQUFPLEdBQ1BDLFFBQVMsR0FDVEMsVUFDQUMsVUFFRkMsZUFDQUMsZUFBZSxFQUNmQyxhQUFjLFNBRWhCQyxRQWZNLFdBZ0JKaEIsS0FBS2MsZUFBZ0IsRUFDckJkLEtBQUtpQixZQUVQQyxTQUNFRCxTQURPLFdBQ0ssSUFBQUUsRUFBQW5CLEtBQ05vQixFQUFZLElBQUlDLFNBQ3BCRCxFQUFVRSxPQUFPLFNBQVUsYUFDM0JDLE1BQU1DLEtBQU4sR0FBY0MsUUFBV0wsR0FBV00sS0FBSyxTQUFBQyxHQUN2Q1IsRUFBS2IsTUFBUXFCLEVBQUl0QixLQUNqQmMsRUFBS1MsY0FBY1QsRUFBS2IsTUFBTSxHQUFHdUIsTUFDakNWLEVBQUtMLGVBQWdCLElBQ3BCZ0IsTUFBTSxTQUFBQyxHQUNQQyxRQUFRQyxJQUFJRixNQUdoQkcsZUFaTyxXQVlXLElBQUFDLEVBQUFuQyxLQUNab0IsRUFBWSxJQUFJQyxTQUNwQkQsRUFBVUUsT0FBTyxTQUFVLG1CQUMzQkYsRUFBVUUsT0FBTyxPQUFRdEIsS0FBS08sWUFDOUJnQixNQUFNQyxLQUFOLEdBQWNDLFFBQVdMLEdBQVdNLEtBQUssU0FBQUMsR0FDdkNRLEVBQUt0QixZQUFjYyxFQUFJdEIsS0FDbkJzQixFQUFJdEIsS0FBSytCLE9BQVMsR0FDcEJELEVBQUszQixRQUFRQyxNQUFRa0IsRUFBSXRCLEtBQUssR0FBR2dDLFdBQ2pDRixFQUFLM0IsUUFBUUUsUUFBVWlCLEVBQUl0QixLQUFLLEdBQUdLLFFB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QUFNd00sT0FBUyxJQUFJbkssT0FBT3RDLFNBQVNDLGNBQWMsZ0JBQWdCLEdBSW5FLFFBQXlDK0QsR0FBckNoRSxTQUFTQyxjQUFjLFdBQ3pCLElBQU15TSxPQUFTLElBQUluSyxPQUFPdkMsU0FBU0MsY0FBYyxZQUduRCxRQUFnRCtELEdBQTVDaEUsU0FBU0MsY0FBYyxrQkFBZ0MsQ0FDekQsSUFBSTBNLGNBQWdCM00sU0FBU0MsY0FBYyxrQkFDckMyTSxFQUFJRCxjQUFjRSxhQUFhLFlBQ3JDRixjQUFjRyxVQUFZQyxPQUFPSCxHQUFHSSxPQUFPLE1BQU1DLFVBRW5ELElBQUlwTixZQUNKLElBQUkrQyxLQUNKLElBQUkrRyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEV4aGliaXRpb25zIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIGNvbnN0IGV4aGliaXRpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2V4aGliaXRpb25zJylcbiAgICBpZiAoZXhoaWJpdGlvbnMpIHtcbiAgICAgIG5ldyBWdWUoe1xuICAgICAgICBlbDogJyNleGhpYml0aW9ucycsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB5ZWFyczogW10sXG4gICAgICAgICAgYWN0aXZlWWVhcjogMjAxNCxcbiAgICAgICAgICBhcnRpY2xlOiB7XG4gICAgICAgICAgICB0aXRsZTogJycsXG4gICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgIHBob3RvczogW10sXG4gICAgICAgICAgICB2aWRlbzogW11cbiAgICAgICAgICB9LFxuICAgICAgICAgIGV4aGliaXRpb25zOiBbXSxcbiAgICAgICAgICBsb2FkZXJBcnRpY2xlOiBmYWxzZSxcbiAgICAgICAgICBsb2FkZXJIZWlnaHQ6ICc0MDBweCcsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50ZWQgKCkge1xuICAgICAgICAgIHRoaXMubG9hZGVyQXJ0aWNsZSA9IHRydWVcbiAgICAgICAgICB0aGlzLmdldFllYXJzKClcbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgIGdldFllYXJzICgpIHtcbiAgICAgICAgICAgIGxldCBmb3JtX2RhdGEgPSBuZXcgRm9ybURhdGFcbiAgICAgICAgICAgIGZvcm1fZGF0YS5hcHBlbmQoJ2FjdGlvbicsICdnZXRfeWVhcnMnKVxuICAgICAgICAgICAgYXhpb3MucG9zdChgJHthamF4dXJsfWAsIGZvcm1fZGF0YSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnllYXJzID0gcmVzLmRhdGFcbiAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVZZWFyKHRoaXMueWVhcnNbMF0ubmFtZSlcbiAgICAgICAgICAgICAgdGhpcy5sb2FkZXJBcnRpY2xlID0gZmFsc2VcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRFeGhpYml0aW9ucyAoKSB7XG4gICAgICAgICAgICBsZXQgZm9ybV9kYXRhID0gbmV3IEZvcm1EYXRhXG4gICAgICAgICAgICBmb3JtX2RhdGEuYXBwZW5kKCdhY3Rpb24nLCAnZ2V0X2V4aGliaXRpb25zJylcbiAgICAgICAgICAgIGZvcm1fZGF0YS5hcHBlbmQoJ3llYXInLCB0aGlzLmFjdGl2ZVllYXIpXG4gICAgICAgICAgICBheGlvcy5wb3N0KGAke2FqYXh1cmx9YCwgZm9ybV9kYXRhKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuZXhoaWJpdGlvbnMgPSByZXMuZGF0YVxuICAgICAgICAgICAgICBpZiAocmVzLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS50aXRsZSA9IHJlcy5kYXRhWzBdLnBvc3RfdGl0bGVcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUuY29udGVudCA9IHJlcy5kYXRhWzBdLmNvbnRlbnRcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUucGhvdG9zID0gcmVzLmRhdGFbMF0ucGhvdG9zXG4gICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLnZpZGVvID0gcmVzLmRhdGFbMF0udmlkZW9cbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGFbMF0udmlkZW8pIHtcbiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgUGxheWVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1lJykpXG4gICAgICAgICAgICAgICAgICB9LCAxMDApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YVswXS5waG90b3MpIHtcbiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgU2xpZGVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItZScpKVxuICAgICAgICAgICAgICAgICAgfSwgMTAwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUudGl0bGUgPSAnJ1xuICAgICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS5jb250ZW50ID0gJydcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUucGhvdG9zID0gW11cbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUudmlkZW8gPSBbXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0QXJ0aWNsZSAocG9zdElkKSB7XG4gICAgICAgICAgICBsZXQgZm9ybV9kYXRhID0gbmV3IEZvcm1EYXRhXG4gICAgICAgICAgICBmb3JtX2RhdGEuYXBwZW5kKCdhY3Rpb24nLCAnZ2V0X2V4aGliaXRpb24nKVxuICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZCgnaWQnLCBwb3N0SWQpXG4gICAgICAgICAgICB0aGlzLmxvYWRlckFydGljbGUgPSB0cnVlXG4gICAgICAgICAgICBheGlvcy5wb3N0KGAke2FqYXh1cmx9YCwgZm9ybV9kYXRhKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS50aXRsZSA9IHJlcy5kYXRhLnBvc3RfdGl0bGVcbiAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLmNvbnRlbnQgPSByZXMuZGF0YS5jb250ZW50XG4gICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS5waG90b3MgPSByZXMuZGF0YS5waG90b3NcbiAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLnZpZGVvID0gcmVzLmRhdGEudmlkZW9cbiAgICAgICAgICAgICAgdGhpcy5sb2FkZXJBcnRpY2xlID0gZmFsc2VcbiAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnZpZGVvKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBuZXcgUGxheWVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1lJykpXG4gICAgICAgICAgICAgICAgfSwgMTAwKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXMuZGF0YS5waG90b3MpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIG5ldyBTbGlkZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlci1lJykpXG4gICAgICAgICAgICAgICAgfSwgMTAwKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0QWN0aXZlWWVhciAoeWVhcikge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVZZWFyID0geWVhclxuICAgICAgICAgICAgdGhpcy5nZXRFeGhpYml0aW9ucyh0aGlzLmFjdGl2ZVllYXIpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufSIsImNsYXNzIE5ld3Mge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgY29uc3QgbmV3cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXdzJylcbiAgICBpZiAobmV3cykge1xuICAgICAgbmV3IFZ1ZSh7XG4gICAgICAgIGVsOiAnI25ld3MnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgY2F0ZWdvcmllczogW10sXG4gICAgICAgICAgYXJ0aWNsZXM6IHt9LFxuICAgICAgICAgIGFjdGl2ZUNhdGVnb3J5OiAnYWxsJyxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgbWF4OiAwLFxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGxvYWRlckhlaWdodDogJzQwMHB4J1xuICAgICAgICB9LFxuICAgICAgICBtb3VudGVkICgpIHtcbiAgICAgICAgICB0aGlzLmdldENhdGVnb3JpZXMoKVxuICAgICAgICAgIHRoaXMuZ2V0QXJ0aWNsZXMoJ2FsbCcpXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICBnZXRDYXRlZ29yaWVzICgpIHtcbiAgICAgICAgICAgIGxldCBmb3JtX2RhdGEgPSBuZXcgRm9ybURhdGFcbiAgICAgICAgICAgIGZvcm1fZGF0YS5hcHBlbmQoJ2FjdGlvbicsICdnZXRfbmV3c19jYXRlZ29yaWVzJylcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWVcbiAgICAgICAgICAgIGF4aW9zLnBvc3QoYCR7YWpheHVybH1gLCBmb3JtX2RhdGEpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5jYXRlZ29yaWVzID0gcmVzLmRhdGFcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRBcnRpY2xlcyAoY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlQ2F0ZWdvcnkgPSBjYXRlZ29yeVxuICAgICAgICAgICAgbGV0IGZvcm1fZGF0YSA9IG5ldyBGb3JtRGF0YVxuICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZCgnYWN0aW9uJywgJ2dldF9uZXdzJylcbiAgICAgICAgICAgIGZvcm1fZGF0YS5hcHBlbmQoJ2NhdGVnb3J5JywgY2F0ZWdvcnkpXG4gICAgICAgICAgICBmb3JtX2RhdGEuYXBwZW5kKCdvZmZzZXQnLCB0aGlzLm9mZnNldClcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWVcbiAgICAgICAgICAgIHRoaXMubG9hZGVySGVpZ2h0ID0gYCR7ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld3MtY29udGFpbmVyJykub2Zmc2V0SGVpZ2h0fXB4YFxuICAgICAgICAgICAgYXhpb3MucG9zdChgJHthamF4dXJsfWAsIGZvcm1fZGF0YSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICBpZiAodGhpcy5hcnRpY2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVzLmRhdGFbMF0uZm9yRWFjaChlID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZXMucHVzaChlKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlcyA9IHJlcy5kYXRhWzBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5tYXggPSBwYXJzZUludChyZXMuZGF0YVsxXSlcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGFuZ2VDYXRlZ29yeSAoY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIHRoaXMuYXJ0aWNsZXMgPSBbXVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgICAgICAgICB0aGlzLmdldEFydGljbGVzKGNhdGVnb3J5KVxuICAgICAgICAgICAgXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsb2FkTW9yZSAoKSB7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSA4XG4gICAgICAgICAgICB0aGlzLmdldEFydGljbGVzKHRoaXMuYWN0aXZlQ2F0ZWdvcnkpXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn0iLCJjbGFzcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3RvciAoY29udGFpbmVyLCBwbGF5bGlzdCA9IGZhbHNlKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICB0aGlzLmJ1dHRvbl90b2dnbGUgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlci1jb250cm9scy0tdG9nZ2xlJylcbiAgICB0aGlzLnZpZGVvID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItdmlkZW8nKVxuICAgIFxuICAgIHRoaXMudGltZV9zZWVrX2JhciA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy13cmFwcGVyLWNvbnRyb2xzLXNlZWstYmFyJylcbiAgICB0aGlzLnRpbWVfc2Vla19iYXJfZmlsbCA9IHRoaXMudGltZV9zZWVrX2Jhci5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlci1jb250cm9scy1zZWVrLWJhci0tZmlsbCcpXG4gICAgdGhpcy50aW1lX2RyYWcgPSBmYWxzZVxuICAgIFxuICAgIHRoaXMudGltZV9jdXJyZW50ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtLXRpbWUtY3VycmVudCcpXG4gICAgdGhpcy50aW1lX2R1cmF0aW9uID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtLXRpbWUtZHVyYXRpb24nKVxuICAgIFxuICAgIHRoaXMuYnV0dG9uX3ZvbHVtZSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy13cmFwcGVyLWNvbnRyb2xzLXZvbHVtZS0taWNvbicpXG4gICAgdGhpcy52b2x1bWVfc2Vla19iYXIgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlci1jb250cm9scy12b2x1bWUtLWJhcicpXG4gICAgdGhpcy52b2x1bWVfc2Vla19iYXJfZmlsbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy13cmFwcGVyLWNvbnRyb2xzLXZvbHVtZS0tYmFyLWZpbGwnKVxuICAgIHRoaXMudm9sdW1lX2RyYWcgPSBmYWxzZVxuICAgIFxuICAgIHRoaXMuZWZmZWN0X3BhdXNlID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItZWZmZWN0LXBhdXNlJylcbiAgICB0aGlzLmVmZmVjdF9wbGF5ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItZWZmZWN0LXBsYXknKVxuICAgIFxuICAgIHRoaXMuYnV0dG9uX2Z1bGxzY3JlZW4gPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlci1jb250cm9scy0tZnVsbHNjcmVlbicpXG4gICAgXG4gICAgdGhpcy5idXR0b25fdG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy50b2dnbGVTdGF0ZSgpXG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnRpbWVfc2Vla19iYXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgdGhpcy50aW1lX3Bvc2l0aW9ucyA9IHRoaXMudGltZV9zZWVrX2Jhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgXG4gICAgICB0aGlzLnVwZGF0ZVRpbWUoZSlcbiAgICB9KVxuICAgIFxuICAgIHRoaXMudGltZV9zZWVrX2Jhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMudGltZV9kcmFnKSB7XG4gICAgICAgIHRoaXMudGltZV9wb3NpdGlvbnMgPSB0aGlzLnRpbWVfc2Vla19iYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgdGhpcy50aW1lX2RyYWcgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnRpbWVfZHJhZykge1xuICAgICAgICB0aGlzLnRpbWVfZHJhZyA9IGZhbHNlXG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh0aGlzLnZvbHVtZV9kcmFnKSB7XG4gICAgICAgIHRoaXMudm9sdW1lX2RyYWcgPSBmYWxzZVxuICAgICAgfVxuICAgIH0pXG4gICAgXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlKSA9PiB7XG4gICAgICBpZiAodGhpcy50aW1lX2RyYWcpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lKGUpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy52b2x1bWVfZHJhZykge1xuICAgICAgICB0aGlzLnVwZGF0ZVZvbHVtZShlKVxuICAgICAgfVxuICAgIH0pXG4gICAgXG4gICAgdGhpcy5idXR0b25fdm9sdW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy50b2dnbGVNdXRlKClcbiAgICB9KVxuICAgIFxuICAgIHRoaXMudm9sdW1lX3NlZWtfYmFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIHRoaXMudm9sdW1lX3Bvc2l0aW9ucyA9IHRoaXMudm9sdW1lX3NlZWtfYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICB0aGlzLnVwZGF0ZVZvbHVtZShlKVxuICAgIH0pXG4gICAgXG4gICAgdGhpcy52b2x1bWVfc2Vla19iYXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLnZvbHVtZV9kcmFnKSB7XG4gICAgICAgIHRoaXMudm9sdW1lX3Bvc2l0aW9ucyA9IHRoaXMudm9sdW1lX3NlZWtfYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIHRoaXMudm9sdW1lX2RyYWcgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICB0aGlzLmJ1dHRvbl9mdWxsc2NyZWVuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy50b2dnbGVGdWxsc2NyZWVuKClcbiAgICB9KVxuICAgIFxuICAgIHRoaXMudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLnRvZ2dsZUZ1bGxzY3JlZW4oKVxuICAgIH0pXG4gICAgXG4gICAgdGhpcy52aWRlby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMudG9nZ2xlU3RhdGUoKVxuICAgICAgaWYgKHRoaXMudmlkZW8ucGF1c2VkKSB7XG4gICAgICAgIHRoaXMuZWZmZWN0X3BsYXkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICAgICAgdGhpcy5lZmZlY3RfcGF1c2UuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmVmZmVjdF9wYXVzZS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICAgICAgICB0aGlzLmVmZmVjdF9wbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnBsYXlsaXN0ID0gcGxheWxpc3RcbiAgICBpZiAodGhpcy5wbGF5bGlzdCkge1xuICAgICAgdGhpcy5jb250YWluZXJfcGxheWxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3MtbmF2LXdyYXBwZXItbGlzdCcpXG4gICAgICB0aGlzLnBsYXlsaXN0X2l0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlY3Rpb24tdmlkZW9zLW5hdi13cmFwcGVyLWxpc3QtaXRlbScpXG4gICAgICB0aGlzLnBsYXlsaXN0X25leHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3MtbmF2LWNvbnRyb2xzLS1uZXh0JylcbiAgICAgIHRoaXMucGxheWxpc3RfcHJldiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy1uYXYtY29udHJvbHMtLXByZXYnKVxuICAgICAgdGhpcy5wbGF5bGlzdF9pbmRleCA9IDBcbiAgICAgIHRoaXMucGxheWxpc3Rfc2VsZWN0ZWQgPSB0aGlzLnBsYXlsaXN0X2l0ZW1zW3RoaXMucGxheWxpc3RfaW5kZXhdXG4gICAgICB0aGlzLnBsYXlsaXN0X2l0ZW1fd2lkdGggPSB0aGlzLnBsYXlsaXN0X2l0ZW1zWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgMjBcbiAgICAgIFxuICAgICAgdGhpcy52aWRlb19pbmRleCA9IDBcbiAgICAgIHRoaXMudmlkZW9fcHJldiA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy13cmFwcGVyLWNvbnRyb2xzLS1za2lwLXByZXYnKVxuICAgICAgdGhpcy52aWRlb19uZXh0ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtLXNraXAtbmV4dCcpXG4gICAgICBcbiAgICAgIHRoaXMucGxheWxpc3RfbmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucGxheWxpc3RfaW5kZXggPCB0aGlzLnBsYXlsaXN0X2l0ZW1zLmxlbmd0aCAtIHRoaXMucGxheWxpc3Rfc2l6ZSkge1xuICAgICAgICAgIHRoaXMucGxheWxpc3RfaW5kZXgrK1xuICAgICAgICAgIHRoaXMudXBkYXRlUGxheWxpc3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgXG4gICAgICB0aGlzLnBsYXlsaXN0X3ByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnBsYXlsaXN0X2luZGV4ID4gMCkge1xuICAgICAgICAgIHRoaXMucGxheWxpc3RfaW5kZXgtLVxuICAgICAgICAgIHRoaXMudXBkYXRlUGxheWxpc3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGxheWxpc3RfaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICAgICAgdGhpcy5wbGF5bGlzdF9pdGVtc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcyAhPSBzZWxmLnBsYXlsaXN0X3NlbGVjdGVkKSB7XG4gICAgICAgICAgICBzZWxmLnZpZGVvX2luZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChzZWxmLnBsYXlsaXN0X2l0ZW1zLCB0aGlzKVxuICAgICAgICAgICAgc2VsZi5zZWxlY3RWaWRlbygpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgXG4gICAgICB0aGlzLnZpZGVvX3ByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnZpZGVvX2luZGV4ID4gMCkge1xuICAgICAgICAgIHRoaXMudmlkZW9faW5kZXgtLVxuICAgICAgICAgIHRoaXMuc2VsZWN0VmlkZW8oKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMudmlkZW9fcHJldi5jbGFzc0xpc3QuYWRkKCdoaWRlJylcbiAgICAgICAgICBjb25zb2xlLmxvZygnbm9wIHByZXYnKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlkZW9fbmV4dC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJylcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIHRoaXMudmlkZW9fbmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudmlkZW9faW5kZXggPCB0aGlzLnBsYXlsaXN0X2l0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICB0aGlzLnZpZGVvX2luZGV4KytcbiAgICAgICAgICB0aGlzLnNlbGVjdFZpZGVvKClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnZpZGVvX25leHQuY2xhc3NMaXN0LmFkZCgnaGlkZScpXG4gICAgICAgICAgY29uc29sZS5sb2coJ25vcCBuZXh0JylcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpZGVvX3ByZXYuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpXG4gICAgICB9KVxuICAgICAgXG4gICAgICB0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy52aWRlb19pbmRleCA8IHRoaXMucGxheWxpc3RfaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHRoaXMudmlkZW9faW5kZXgrK1xuICAgICAgICAgIHRoaXMuc2VsZWN0VmlkZW8oKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnBsYXlsaXN0X2l0ZW1fd2lkdGggPSB0aGlzLnBsYXlsaXN0X2l0ZW1zWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgMjBcbiAgICAgICAgaWYgKHRoaXMucGxheWxpc3QpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygncmVzaXplJylcbiAgICAgICAgICB0aGlzLmluaXRQbGF5bGlzdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBcbiAgICAgIHRoaXMuaW5pdFBsYXlsaXN0KClcbiAgICB9XG4gICAgXG4gICAgdGhpcy5pbml0KClcbiAgICBcbiAgfVxuICBcbiAgLy8gaW5pdCBuZXcgdmlkZW9cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgncGxheWluZycpXG4gICAgdGhpcy5lZmZlY3RfcGF1c2UuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICB0aGlzLmVmZmVjdF9wbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgdGhpcy52aWRlby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRkYXRhJywgKCkgPT4ge1xuICAgICAgdGhpcy52aWRlby5jdXJyZW50VGltZSA9IC40NVxuICAgICAgdGhpcy50aW1lX2R1cmF0aW9uLnRleHRDb250ZW50ID0gdGhpcy5mb3JtYXRUaW1lKHRoaXMudmlkZW8uZHVyYXRpb24pXG4gICAgICB0aGlzLnRpbWVfY3VycmVudC50ZXh0Q29udGVudCA9IHRoaXMuZm9ybWF0VGltZSh0aGlzLnZpZGVvLmN1cnJlbnRUaW1lKVxuICAgICAgXG4gICAgICB0aGlzLnRpbWVfc2Vla19iYXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKDApJ1xuICAgIH0pXG4gIH1cbiAgXG4gIGluaXRQbGF5bGlzdCAoKSB7XG4gICAgbGV0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAod2lkdGggPCA0MjUpIHtcbiAgICAgIHRoaXMucGxheWxpc3Rfc2l6ZSA9IDFcbiAgICB9XG4gICAgZWxzZSBpZiAod2lkdGggPCA2NTApIHtcbiAgICAgIHRoaXMucGxheWxpc3Rfc2l6ZSA9IDJcbiAgICB9XG4gICAgZWxzZSBpZiAod2lkdGggPCA5MDApIHtcbiAgICAgIHRoaXMucGxheWxpc3Rfc2l6ZSA9IDNcbiAgICB9XG4gICAgZWxzZSBpZiAod2lkdGggPCAxMzAwKSB7XG4gICAgICB0aGlzLnBsYXlsaXN0X3NpemUgPSA1XG4gICAgfVxuICAgIGVsc2UgaWYgKHdpZHRoIDwgMjUwMCkge1xuICAgICAgdGhpcy5wbGF5bGlzdF9zaXplID0gNlxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMucGxheWxpc3Rfc2l6ZSA9IDlcbiAgICB9XG4gICAgXG4gICAgdGhpcy5wbGF5bGlzdF9pbmRleCA9IDBcbiAgICB0aGlzLnVwZGF0ZVBsYXlsaXN0KClcbiAgfVxuICBcbiAgLy91cGRhdGUgZnVuY1xuICB0b2dnbGVTdGF0ZSAoKSB7XG4gICAgaWYgKHRoaXMudmlkZW8ucGF1c2VkKSB7XG4gICAgICB0aGlzLnZpZGVvLnBsYXkoKVxuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncGxheWluZycpXG4gICAgICB0aGlzLnJlbmRlcigpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy52aWRlby5wYXVzZSgpXG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdwbGF5aW5nJylcbiAgICB9XG4gICAgdGhpcy5lZmZlY3RfcGF1c2UuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICB0aGlzLmVmZmVjdF9wbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gIH1cbiAgXG4gIHVwZGF0ZVRpbWUgKGUpIHtcbiAgICBsZXQgcmF0aW8gPSAoZS5wYWdlWCAtIHRoaXMudGltZV9wb3NpdGlvbnMubGVmdCkgLyB0aGlzLnRpbWVfcG9zaXRpb25zLndpZHRoXG4gICAgaWYgKHJhdGlvID49IDAgJiYgcmF0aW8gPCAxKSB7XG4gICAgICB0aGlzLnRpbWVfc2Vla19iYXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKCcgKyByYXRpbyArICcpJ1xuICAgICAgdGhpcy52aWRlby5jdXJyZW50VGltZSA9IHJhdGlvICogdGhpcy52aWRlby5kdXJhdGlvblxuICAgICAgdGhpcy50aW1lX2N1cnJlbnQudGV4dENvbnRlbnQgPSB0aGlzLmZvcm1hdFRpbWUodGhpcy52aWRlby5jdXJyZW50VGltZSlcbiAgICB9XG4gIH1cbiAgXG4gIHVwZGF0ZVZvbHVtZSAoZSkge1xuICAgIGxldCByYXRpbyA9IChlLnBhZ2VYIC0gdGhpcy52b2x1bWVfcG9zaXRpb25zLmxlZnQpIC8gdGhpcy52b2x1bWVfcG9zaXRpb25zLndpZHRoXG4gICAgaWYgKHJhdGlvID49IDAgJiYgcmF0aW8gPCAxKSB7XG4gICAgICB0aGlzLnZpZGVvLnZvbHVtZSA9IHJhdGlvXG4gICAgICB0aGlzLnZvbHVtZV9zZWVrX2Jhcl9maWxsLnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZVgoJyArIHJhdGlvICsgJyknXG4gICAgICBpZiAodGhpcy52aWRlby5tdXRlZCkge1xuICAgICAgICB0aGlzLnRvZ2dsZU11dGUoKVxuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAocmF0aW8gPj0gLjUpIHtcbiAgICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5hZGQoJ3ZvbHVtZS0yJylcbiAgICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5yZW1vdmUoJ3ZvbHVtZS0xJylcbiAgICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5yZW1vdmUoJ3ZvbHVtZS0wJylcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHJhdGlvIDwgLjUgJiYgcmF0aW8gPj0gLjI1KSB7XG4gICAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QucmVtb3ZlKCd2b2x1bWUtMicpXG4gICAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QuYWRkKCd2b2x1bWUtMScpXG4gICAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QucmVtb3ZlKCd2b2x1bWUtMCcpXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChyYXRpbyA8IC4yNSkge1xuICAgICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTInKVxuICAgICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTEnKVxuICAgICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LmFkZCgndm9sdW1lLTAnKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAocmF0aW8gPD0gMCkge1xuICAgICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTInKVxuICAgICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTEnKVxuICAgICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTAnKVxuICAgICAgICB0aGlzLnRvZ2dsZU11dGUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgdG9nZ2xlTXV0ZSAoKSB7XG4gICAgaWYgKHRoaXMudmlkZW8ubXV0ZWQpIHtcbiAgICAgIHRoaXMudmlkZW8ubXV0ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5yZW1vdmUoJ211dGUnKVxuICAgICAgdGhpcy52b2x1bWVfc2Vla19iYXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKCcgKyB0aGlzLnZpZGVvLnZvbHVtZSArICcpJ1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudmlkZW8ubXV0ZWQgPSB0cnVlXG4gICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LmFkZCgnbXV0ZScpXG4gICAgICB0aGlzLnZvbHVtZV9zZWVrX2Jhcl9maWxsLnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZVgoMCknXG4gICAgfVxuICB9XG4gIFxuICB0b2dnbGVGdWxsc2NyZWVuICgpIHtcbiAgICBpZiAoZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgPT0gbnVsbCAmJiBkb2N1bWVudC5tb3pGdWxsc2NyZWVuRWxlbWVudCA9PSBudWxsICYmIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ID09IG51bGwgJiYgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5jb250YWluZXIucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVxdWVzdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5jb250YWluZXIubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIubW96UmVxdWVzdEZ1bGxTY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5jb250YWluZXIud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5jb250YWluZXIubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5tc1JlcXVlc3RGdWxsc2NyZWVuKClcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZG9jdW1lbnQubW96RXhpdEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgZG9jdW1lbnQubW96RXhpdEZ1bGxTY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIC8vcGxheWxpc3RcbiAgdXBkYXRlUGxheWxpc3QgKCkge1xuICAgIHRoaXMuY29udGFpbmVyX3BsYXlsaXN0LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKC0nICsgKHRoaXMucGxheWxpc3RfaW5kZXggKiB0aGlzLnBsYXlsaXN0X2l0ZW1fd2lkdGgpICsgJ3B4KSdcbiAgICBcbiAgICBpZiAodGhpcy5wbGF5bGlzdF9pbmRleCA9PSAwKSB7XG4gICAgICB0aGlzLnBsYXlsaXN0X3ByZXYuY2xhc3NMaXN0LmFkZCgnaGlkZScpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5wbGF5bGlzdF9wcmV2LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgIH1cbiAgICBcbiAgICBpZiAodGhpcy5wbGF5bGlzdF9pbmRleCA+PSAodGhpcy5wbGF5bGlzdF9pdGVtcy5sZW5ndGggLSB0aGlzLnBsYXlsaXN0X3NpemUpKSB7XG4gICAgICB0aGlzLnBsYXlsaXN0X25leHQuY2xhc3NMaXN0LmFkZCgnaGlkZScpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5wbGF5bGlzdF9uZXh0LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgIH1cbiAgfVxuICBcbiAgc2VsZWN0VmlkZW8gKCkge1xuICAgIHRoaXMucGxheWxpc3Rfc2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICB0aGlzLnBsYXlsaXN0X3NlbGVjdGVkID0gdGhpcy5wbGF5bGlzdF9pdGVtc1t0aGlzLnZpZGVvX2luZGV4XVxuICAgIHRoaXMucGxheWxpc3Rfc2VsZWN0ZWQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICBcbiAgICB0aGlzLnZpZGVvLnNyYyA9IHRoaXMucGxheWxpc3Rfc2VsZWN0ZWQuZGF0YXNldC50YXJnZXRcbiAgICB0aGlzLmluaXQoKVxuICAgIFxuICAgIGlmICh0aGlzLnZpZGVvX2luZGV4ID4gdGhpcy5wbGF5bGlzdF9pbmRleCArIHRoaXMucGxheWxpc3Rfc2l6ZSAtIDEpIHtcbiAgICAgIHRoaXMucGxheWxpc3RfaW5kZXgrK1xuICAgICAgdGhpcy51cGRhdGVQbGF5bGlzdCgpXG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMudmlkZW9faW5kZXggPCB0aGlzLnBsYXlsaXN0X2luZGV4KSB7XG4gICAgICB0aGlzLnBsYXlsaXN0X2luZGV4LS1cbiAgICAgIHRoaXMudXBkYXRlUGxheWxpc3QoKVxuICAgIH1cbiAgICBcbiAgICBpZiAodGhpcy52aWRlb19pbmRleCA9PSAwKSB7XG4gICAgICB0aGlzLnZpZGVvX3ByZXYuY2xhc3NMaXN0LmFkZCgnaGlkZScpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy52aWRlb19wcmV2LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgIH1cbiAgICBcbiAgICBpZiAodGhpcy52aWRlb19pbmRleCA+PSAodGhpcy5wbGF5bGlzdF9pdGVtcy5sZW5ndGggLSAxKSkge1xuICAgICAgdGhpcy52aWRlb19uZXh0LmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudmlkZW9fbmV4dC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJylcbiAgICB9XG4gIH1cbiAgXG4gIC8vcmVuZGVyIGZ1bmNcbiAgcmVuZGVyICgpIHtcbiAgICBpZiAoIXRoaXMudmlkZW8ucGF1c2VkKSB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVuZGVyLmJpbmQodGhpcykpXG4gICAgfVxuICAgIFxuICAgIGxldCByYXRpbyA9IHRoaXMudmlkZW8uY3VycmVudFRpbWUgLyB0aGlzLnZpZGVvLmR1cmF0aW9uXG4gICAgdGhpcy50aW1lX3NlZWtfYmFyX2ZpbGwuc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlWCgnICsgcmF0aW8gKyAnKSdcbiAgICBcbiAgICB0aGlzLnRpbWVfY3VycmVudC50ZXh0Q29udGVudCA9IHRoaXMuZm9ybWF0VGltZSh0aGlzLnZpZGVvLmN1cnJlbnRUaW1lKVxuICAgIFxuICAgIGlmICh0aGlzLnZpZGVvLmN1cnJlbnRUaW1lID09IHRoaXMudmlkZW8uZHVyYXRpb24pIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXlpbmcnKVxuICAgIH1cbiAgfVxuICBcbiAgLy8gdXNlZnVsbCBmdW5jXG4gIGZvcm1hdFRpbWUgKHRpbWUpIHtcbiAgICB0aW1lID0gTWF0aC5yb3VuZCh0aW1lKVxuICAgIGxldCBob3VycyA9IE1hdGguZmxvb3IodGltZSAvIDM2MDApXG4gICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0aW1lIC0gKGhvdXJzICogMzYwMCkpIC8gNjApXG4gICAgbGV0IHNlY29uZHMgPSB0aW1lIC0gKGhvdXJzICogMzYwMCkgLSAobWludXRlcyAqIDYwKVxuICAgIFxuICAgIGhvdXJzID0gaG91cnMgPCAxMCA/ICcwJyArIGhvdXJzIDogaG91cnNcbiAgICBtaW51dGVzID0gbWludXRlcyA8IDEwID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXNcbiAgICBzZWNvbmRzID0gc2Vjb25kcyA8IDEwID8gJzAnICsgc2Vjb25kcyA6IHNlY29uZHNcbiAgICBcbiAgICBpZiAoaG91cnMgIT0gMCkge1xuICAgICAgcmV0dXJuIGhvdXJzICsgJzonICsgbWludXRlcyArICc6JyArIHNlY29uZHNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gbWludXRlcyArICc6JyArIHNlY29uZHNcbiAgICB9XG4gIH1cbn0iLCJjbGFzcyBQcm9qZWN0cyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBjb25zdCBwcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0cycpXG4gICAgaWYgKHByb2plY3RzKSB7XG4gICAgICBuZXcgVnVlKHtcbiAgICAgICAgZWw6ICcjcHJvamVjdHMnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcHJvamVjdHM6IFtdLFxuICAgICAgICAgIHByb2plY3RzRGV0YWlsczogW10sXG4gICAgICAgICAgYWN0aXZlUHJvamVjdDogJycsXG4gICAgICAgICAgYWN0aXZlUHJvamVjdFNsdWc6ICcnLFxuICAgICAgICAgIGFydGljbGU6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICAgICAgeWVhcjogJycsXG4gICAgICAgICAgICBwaG90b3M6IFtdLFxuICAgICAgICAgICAgdmlkZW9zOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbG9hZGVyQXJ0aWNsZTogZmFsc2UsXG4gICAgICAgICAgbG9hZGVySGVpZ2h0OiAnNDAwcHgnLFxuICAgICAgICB9LFxuICAgICAgICBtb3VudGVkICgpIHtcbiAgICAgICAgICB0aGlzLmxvYWRlckFydGljbGUgPSB0cnVlXG4gICAgICAgICAgdGhpcy5nZXRQcm9qZWN0cygpXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICBnZXRQcm9qZWN0cyAoKSB7XG4gICAgICAgICAgICBsZXQgZm9ybV9kYXRhID0gbmV3IEZvcm1EYXRhXG4gICAgICAgICAgICBmb3JtX2RhdGEuYXBwZW5kKCdhY3Rpb24nLCAnZ2V0X3Byb2plY3RzX2NhdGVnb3JpZXMnKVxuICAgICAgICAgICAgYXhpb3MucG9zdChgJHthamF4dXJsfWAsIGZvcm1fZGF0YSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnByb2plY3RzID0gcmVzLmRhdGFcbiAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVQcm9qZWN0KHRoaXMucHJvamVjdHNbMF0ubmFtZSwgdGhpcy5wcm9qZWN0c1swXS5zbHVnKVxuICAgICAgICAgICAgICB0aGlzLmxvYWRlckFydGljbGUgPSBmYWxzZVxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldFByb2plY3RzRGV0YWlscyAoKSB7XG4gICAgICAgICAgICBsZXQgZm9ybV9kYXRhID0gbmV3IEZvcm1EYXRhXG4gICAgICAgICAgICBmb3JtX2RhdGEuYXBwZW5kKCdhY3Rpb24nLCAnZ2V0X3Byb2plY3RzX2RldGFpbHMnKVxuICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZCgncHJvamVjdF9jYXRlZ29yeScsIHRoaXMuYWN0aXZlUHJvamVjdFNsdWcpXG4gICAgICAgICAgICBheGlvcy5wb3N0KGAke2FqYXh1cmx9YCwgZm9ybV9kYXRhKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgIHRoaXMucHJvamVjdHNEZXRhaWxzID0gcmVzLmRhdGFcbiAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUudGl0bGUgPSByZXMuZGF0YVswXS5wb3N0X3RpdGxlXG4gICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLmNvbnRlbnQgPSByZXMuZGF0YVswXS5jb250ZW50XG4gICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLnBob3RvcyA9IHJlcy5kYXRhWzBdLnBob3Rvc1xuICAgICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS52aWRlb3MgPSByZXMuZGF0YVswXS52aWRlb3NcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUueWVhciA9IHJlcy5kYXRhWzBdLnllYXJcbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGFbMF0ucGhvdG9zKSB7XG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNsaWRlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2xpZGVyLXAnKSlcbiAgICAgICAgICAgICAgICAgIH0sIDkwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGFbMF0udmlkZW9zKSB7XG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBsYXllcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdmlkZW8tcCcpLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgfSwgMTAwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUudGl0bGUgPSAnJ1xuICAgICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS5jb250ZW50ID0gJydcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGUueWVhciA9ICcnXG4gICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLnBob3RvcyA9IFtdXG4gICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLnZpZGVvcyA9IFtdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXREZXRhaWxzIChwb3N0SWQpIHtcbiAgICAgICAgICAgIGxldCBmb3JtX2RhdGEgPSBuZXcgRm9ybURhdGFcbiAgICAgICAgICAgIGZvcm1fZGF0YS5hcHBlbmQoJ2FjdGlvbicsICdnZXRfcHJvamVjdF9kZXRhaWwnKVxuICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZCgnaWQnLCBwb3N0SWQpXG4gICAgICAgICAgICB0aGlzLmxvYWRlckFydGljbGUgPSB0cnVlXG4gICAgICAgICAgICBheGlvcy5wb3N0KGAke2FqYXh1cmx9YCwgZm9ybV9kYXRhKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS50aXRsZSA9IHJlcy5kYXRhLnBvc3RfdGl0bGVcbiAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLmNvbnRlbnQgPSByZXMuZGF0YS5jb250ZW50XG4gICAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS5waG90b3MgPSByZXMuZGF0YS5waG90b3NcbiAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlLnZpZGVvcyA9IHJlcy5kYXRhLnZpZGVvc1xuICAgICAgICAgICAgICB0aGlzLmFydGljbGUueWVhciA9IHJlcy5kYXRhLnllYXJcbiAgICAgICAgICAgICAgdGhpcy5sb2FkZXJBcnRpY2xlID0gZmFsc2VcbiAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnBob3Rvcykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgbmV3IFNsaWRlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2xpZGVyLXAnKSlcbiAgICAgICAgICAgICAgICB9LCA5MClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocmVzLmRhdGEudmlkZW9zKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBuZXcgUGxheWVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1wJyksIHRydWUpXG4gICAgICAgICAgICAgICAgfSwgMTAwKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0QWN0aXZlUHJvamVjdCAobmFtZSwgc2x1Zykge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVQcm9qZWN0ID0gbmFtZVxuICAgICAgICAgICAgdGhpcy5hY3RpdmVQcm9qZWN0U2x1ZyA9IHNsdWdcbiAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS50aXRsZSA9ICcnXG4gICAgICAgICAgICB0aGlzLmFydGljbGUuY29udGVudCA9ICcnXG4gICAgICAgICAgICB0aGlzLmFydGljbGUueWVhciA9ICcnXG4gICAgICAgICAgICB0aGlzLmFydGljbGUucGhvdG9zID0gW11cbiAgICAgICAgICAgIHRoaXMuYXJ0aWNsZS52aWRlb3MgPSBbXVxuICAgICAgICAgICAgdGhpcy5nZXRQcm9qZWN0c0RldGFpbHMoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn0iLCJjbGFzcyBTbGlkZXJ7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcil7XG4gICAgdGhpcy5jb250YWluZXIgICA9IGNvbnRhaW5lclxuICAgIHRoaXMuaXRlbXMgICAgICAgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyLWl0ZW0nKVxuICAgIHRoaXMuYnV0dG9uX25leHQgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLW5leHQnKVxuICAgIHRoaXMuYnV0dG9uX3ByZXYgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXByZXYnKVxuICAgIHRoaXMudGltZXJfZmlsbCAgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXRpbWVyLWZpbGwnKVxuICAgIHRoaXMudGV4dF9jdXJyZW50ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNsaWRlci1pbmRleC1jdXJyZW50JylcbiAgICB0aGlzLnRleHRfdG90YWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLWluZGV4LXRvdGFsJylcbiAgICBcbiAgICB0aGlzLmluZGV4ICAgICAgPSAwXG4gICAgdGhpcy5zdGFja2luZyAgID0gMVxuICAgIHRoaXMubGFzdF9pbmRleCA9IDBcbiAgICBcbiAgICB0aGlzLnNsaWRlX2ludGVydmFsID0gNDAwMFxuICAgIHRoaXMubGFzdF91cGRhdGUgICAgPSAwXG4gICAgdGhpcy5uZWVkX3VwZGF0ZSAgICA9IHRydWVcbiAgICB0aGlzLmRyYXcgICAgICAgICAgID0gdHJ1ZVxuICAgIFxuICAgIHRoaXMuaW5pdCgpXG4gICAgdGhpcy5yZW5kZXIoKVxuICAgIHRoaXMuc3RhcnRJbnRlcnZhbCgpXG4gICAgXG4gICAgdGhpcy5idXR0b25fbmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICBpZighdGhpcy5jbGlja2VkKXtcbiAgICAgICAgaWYodGhpcy5pbmRleCA8IHRoaXMuaXRlbXMubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgdGhpcy5pbmRleCArK1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgdGhpcy5pbmRleCA9IDBcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZSgpXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICB0aGlzLmJ1dHRvbl9wcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgIGlmKCF0aGlzLmNsaWNrZWQpe1xuICAgICAgICBpZih0aGlzLmluZGV4ID4gMCl7XG4gICAgICAgICAgdGhpcy5pbmRleCAtLVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIFxuICBzdGFydEludGVydmFsKCl7XG4gICAgdGhpcy5pbnRlcnZhbCA9IHNldFRpbWVvdXQoKCk9PntcbiAgICAgIFxuICAgICAgdGhpcy5idXR0b25fbmV4dC5jbGljaygpXG4gICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWwoKVxuICAgIH0sIHRoaXMuc2xpZGVfaW50ZXJ2YWwpXG4gIH1cbiAgXG4gIGluaXQoKXtcbiAgICB0aGlzLnRleHRfdG90YWwudGV4dENvbnRlbnQgPSB0aGlzLml0ZW1zLmxlbmd0aCA+IDkgPyB0aGlzLml0ZW1zLmxlbmd0aCA6ICcwJyArIHRoaXMuaXRlbXMubGVuZ3RoXG4gICAgdGhpcy5pbmRleCA9IDBcbiAgICB0aGlzLml0ZW1zW3RoaXMuaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgdGhpcy50ZXh0X2N1cnJlbnQudGV4dENvbnRlbnQgPSAodGhpcy5pbmRleCsxKSA+IDkgPyAodGhpcy5pbmRleCsxKSA6ICcwJyArICh0aGlzLmluZGV4KzEpXG4gIH1cbiAgXG4gIHVwZGF0ZSgpe1xuICAgIHRoaXMudGV4dF90b3RhbC50ZXh0Q29udGVudCA9IHRoaXMuaXRlbXMubGVuZ3RoID4gOSA/IHRoaXMuaXRlbXMubGVuZ3RoIDogJzAnICsgdGhpcy5pdGVtcy5sZW5ndGhcbiAgICB0aGlzLnRleHRfY3VycmVudC50ZXh0Q29udGVudCA9ICh0aGlzLmluZGV4KzEpID4gOSA/ICh0aGlzLmluZGV4KzEpIDogJzAnICsgKHRoaXMuaW5kZXgrMSlcbiAgICBcbiAgICB0aGlzLml0ZW1zW3RoaXMuaW5kZXhdLnN0eWxlLnpJbmRleCA9IHRoaXMuc3RhY2tpbmcrK1xuICAgIFxuICAgIC8vIHRoaXMuaXRlbXNbdGhpcy5pbmRleF0uY2xhc3NMaXN0LmFkZCgndXAtaW5kZXgnKVxuICAgIC8vIHRoaXMuaXRlbXNbdGhpcy5sYXN0X2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCd1cC1pbmRleCcpXG4gICAgdGhpcy5pdGVtc1t0aGlzLmluZGV4XS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICAgIFxuICAgIHRoaXMuY2xpY2tlZCA9IHRydWVcbiAgICB0aGlzLmRyYXcgICAgPSBmYWxzZVxuICAgIHRoaXMudGltZXJfZmlsbC5jbGFzc0xpc3QuYWRkKCdmaWxsJylcbiAgICBcbiAgICBcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuaXRlbXNbdGhpcy5sYXN0X2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgdGhpcy5sYXN0X2luZGV4ID0gdGhpcy5pbmRleFxuICAgICAgdGhpcy5jbGlja2VkID0gZmFsc2VcbiAgICAgIFxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaW50ZXJ2YWwpXG4gICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWwoKVxuICAgICAgXG4gICAgICB0aGlzLnRpbWVyX2ZpbGwuY2xhc3NMaXN0LnJlbW92ZSgnZmlsbCcpXG4gICAgICB0aGlzLm5lZWRfdXBkYXRlID0gdHJ1ZVxuICAgICAgdGhpcy5kcmF3ICAgICAgICA9IHRydWVcbiAgICB9LCA2MTApXG4gICAgXG4gIH1cbiAgXG4gIHJlbmRlcih0aW1lKXtcbiAgICAvLyBjb25zb2xlLmxvZyh0aW1lKVxuICAgIGlmKHRoaXMubmVlZF91cGRhdGUgfHwgdGhpcy5sYXN0X3VwZGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRpbWUgPT09IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLmxhc3RfdXBkYXRlID0gdGltZVxuICAgICAgdGhpcy5uZWVkX3VwZGF0ZSA9IGZhbHNlXG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKHRpbWUgLSB0aGlzLmxhc3RfdXBkYXRlIC8gdGhpcy5kdXJhdGlvbilcbiAgICBpZigodGltZSAtIHRoaXMubGFzdF91cGRhdGUpIC8gdGhpcy5zbGlkZV9pbnRlcnZhbCA+PSAxKXtcbiAgICAgIGxldCByYXRpbyA9ICh0aW1lIC0gdGhpcy5sYXN0X3VwZGF0ZSkgLyB0aGlzLnNsaWRlX2ludGVydmFsXG4gICAgICB0aGlzLnRpbWVyX2ZpbGwuc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlWCgnKyByYXRpbyArJyknXG4gICAgICB0aGlzLmxhc3RfdXBkYXRlID0gdGltZVxuICAgIH1cbiAgICBcbiAgICBpZih0aGlzLmRyYXcpe1xuICAgICAgbGV0IHJhdGlvID0gKHRpbWUgLSB0aGlzLmxhc3RfdXBkYXRlKSAvIHRoaXMuc2xpZGVfaW50ZXJ2YWxcbiAgICAgIHRoaXMudGltZXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKCcrIHJhdGlvICsnKSdcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHRoaXMudGltZXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSBudWxsXG4gICAgfVxuICAgIFxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXIuYmluZCh0aGlzKSlcbiAgfVxuICBcbn0iLCIvLyBIRUFERVIgQlVSR0VSXG5jb25zdCBidXJnZXJfYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci1idXJnZXInKVxuY29uc3QgYnVyZ2VyX25hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItbmF2JylcblxuYnVyZ2VyX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgYnVyZ2VyX2J1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXItYnVyZ2VyLWFjdGl2ZScpXG4gIGJ1cmdlcl9uYXYuY2xhc3NMaXN0LnRvZ2dsZSgnaGVhZGVyLW5hdi1leHBhbmQnKVxufSlcblxuY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpXG52YXIgaGVhZGVyX2hpZGUgPSBmYWxzZVxuZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgZnVuY3Rpb24gKGUpIHtcbiAgaWYgKCFoZWFkZXJfaGlkZSAmJiBlLmRlbHRhWSA8IDAgJiYgIXNjcm9sbF9kaXNhYmxlZCkge1xuICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJylcbiAgICBoZWFkZXJfaGlkZSA9IHRydWVcbiAgfVxuICBlbHNlIGlmIChoZWFkZXJfaGlkZSAmJiBlLmRlbHRhWSA+IDAgJiYgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPiA4MCAmJiAhc2Nyb2xsX2Rpc2FibGVkKSB7XG4gICAgaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuICAgIGhlYWRlcl9oaWRlID0gZmFsc2VcbiAgfVxufSlcbi8vIFNDUk9MTCBESVNBQkxFXG5jb25zdCBkaXNhYmxlZF9lbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zY3JvbGwtZGlzYWJsZScpXG52YXIgc2Nyb2xsX2Rpc2FibGVkID0gZmFsc2VcbmZvciAodmFyIGkgPSAwOyBpIDwgZGlzYWJsZWRfZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgZGlzYWJsZWRfZWxlbWVudHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICBzY3JvbGxfZGlzYWJsZWQgPSB0cnVlXG4gIH0pXG4gIGRpc2FibGVkX2VsZW1lbnRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgc2Nyb2xsX2Rpc2FibGVkID0gZmFsc2VcbiAgfSlcbn1cblxuLy8gRVhISUJJVElPTlMgU0xJREVSXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tZXhoaWJpdGlvbnMnKSAhPSB1bmRlZmluZWQpIHtcbiAgY29uc3QgZXhoaWJpdGlvbnNfYnV0dG9uc19pdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlY3Rpb24tZXhoaWJpdGlvbnMtY29udGFpbmVyLXNsaWRlci1uYXYtbGlzdC0taXRlbScpXG4gIGNvbnN0IGV4aGliaXRpb25zX2J1dHRvbnNfY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tZXhoaWJpdGlvbnMtY29udGFpbmVyLXNsaWRlci1uYXYtbGlzdCcpXG4gIGNvbnN0IGV4aGliaXRpb25zX2xpc3RfaW1nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tZXhoaWJpdGlvbnMtY29udGFpbmVyLXNsaWRlci13cmFwcGVyLWxpc3QnKVxuICBjb25zdCBleGhpYml0aW9uc19saXN0X2NvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1leGhpYml0aW9ucy1jb250YWluZXItY29udGVudC13cmFwcGVyLWxpc3QnKVxuICBsZXQgZXhoaWJpdGlvbnNfbGFzdF9pbmRleCA9IDBcbiAgXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXhoaWJpdGlvbnNfYnV0dG9uc19pdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgZXhoaWJpdGlvbnNfYnV0dG9uc19pdGVtW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChleGhpYml0aW9uc19idXR0b25zX2l0ZW0sIHRoaXMpXG4gICAgICBcbiAgICAgIGlmIChleGhpYml0aW9uc19idXR0b25zX2l0ZW1bZXhoaWJpdGlvbnNfbGFzdF9pbmRleF0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGV4aGliaXRpb25zX2J1dHRvbnNfaXRlbVtleGhpYml0aW9uc19sYXN0X2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgfVxuICAgICAgZXhoaWJpdGlvbnNfbGFzdF9pbmRleCA9IGluZGV4XG4gICAgICBcbiAgICAgIGV4aGliaXRpb25zX2J1dHRvbnNfaXRlbVtpbmRleF0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICAgIFxuICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDkwMCkge1xuICAgICAgICBleGhpYml0aW9uc19saXN0X2ltZy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgtJyArIChpbmRleCAqIDEwMCkgKyAnJSknXG4gICAgICAgIGV4aGliaXRpb25zX2xpc3RfY29udGVudC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgtJyArIChpbmRleCAqIDEwMCkgKyAnJSknXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZXhoaWJpdGlvbnNfbGlzdF9pbWcuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLScgKyAoaW5kZXggKiAxMDApICsgJyUpJ1xuICAgICAgICBleGhpYml0aW9uc19saXN0X2NvbnRlbnQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLScgKyAoaW5kZXggKiAxMDApICsgJyUpJ1xuICAgICAgICBleGhpYml0aW9uc19idXR0b25zX2NvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgtJyArICgoKGluZGV4IC0gMSkgLyAzKSAqIDEwMCkgKyAnJSknXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vLyBIT01FIFBMQVlFUilcbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdmlkZW8taG9tZScpICE9IHVuZGVmaW5lZCkge1xuICBjb25zdCBwbGF5ZXIgPSBuZXcgUGxheWVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1ob21lJyksIHRydWUpXG59XG5cbi8vIFNMSURFUlxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXInKSAhPSB1bmRlZmluZWQpIHtcbiAgY29uc3Qgc2xpZGVyID0gbmV3IFNsaWRlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyJykpXG59XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5zdGFncmFtRGF0ZScpICE9IHVuZGVmaW5lZCkge1xuICBsZXQgaW5zdGFncmFtRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnN0YWdyYW1EYXRlJylcbiAgY29uc3QgZCA9IGluc3RhZ3JhbURhdGUuZ2V0QXR0cmlidXRlKCdkYXRldGltZScpXG4gIGluc3RhZ3JhbURhdGUuaW5uZXJUZXh0ID0gbW9tZW50KGQpLmxvY2FsZSgnZnInKS5mcm9tTm93KClcbn1cbm5ldyBFeGhpYml0aW9ucygpXG5uZXcgTmV3cygpXG5uZXcgUHJvamVjdHMoKVxuIl19