"use strict"; function _classCallCheck(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") } var _createClass = function () { function e(e, t) { for (var i = 0; i < t.length; i++) { var s = t[i]; s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, s.key, s) } } return function (t, i, s) { return i && e(t.prototype, i), s && e(t, s), t } }(), Controller = function () { function e(t) { var i = this; _classCallCheck(this, e), this.container = t, this.button_toggle = this.container.querySelector(".section-videos-wrapper-controls--toggle"), this.video = this.container.querySelector(".section-videos-wrapper-video"), this.time_seek_bar = this.container.querySelector(".section-videos-wrapper-controls-seek-bar"), this.time_seek_bar_fill = this.time_seek_bar.querySelector(".section-videos-wrapper-controls-seek-bar--fill"), this.time_drag = !1, this.time_current = this.container.querySelector(".section-videos-wrapper-controls--time-current"), this.time_duration = this.container.querySelector(".section-videos-wrapper-controls--time-duration"), this.button_volume = this.container.querySelector(".section-videos-wrapper-controls-volume--icon"), this.volume_seek_bar = this.container.querySelector(".section-videos-wrapper-controls-volume--bar"), this.volume_seek_bar_fill = this.container.querySelector(".section-videos-wrapper-controls-volume--bar-fill"), this.volume_drag = !1, this.effect_pause = this.container.querySelector(".section-videos-wrapper-effect-pause"), this.effect_play = this.container.querySelector(".section-videos-wrapper-effect-play"), this.button_fullscreen = this.container.querySelector(".section-videos-wrapper-controls--fullscreen"), this.container_playlist = document.querySelector(".section-videos-nav-wrapper-list"), this.playlist_items = document.querySelectorAll(".section-videos-nav-wrapper-list-item"), this.playlist_next = document.querySelector(".section-videos-nav-controls--next"), this.playlist_prev = document.querySelector(".section-videos-nav-controls--prev"), this.playlist_index = 0, this.playlist_item_width = this.playlist_items[0].getBoundingClientRect().width + 20, this.button_toggle.addEventListener("click", function () { i.toggleState() }), this.time_seek_bar.addEventListener("click", function (e) { i.time_positions = i.time_seek_bar.getBoundingClientRect(), i.updateTime(e) }), this.time_seek_bar.addEventListener("mousedown", function () { i.time_drag || (i.time_positions = i.time_seek_bar.getBoundingClientRect(), i.time_drag = !0) }), window.addEventListener("mouseup", function () { i.time_drag && (i.time_drag = !1), i.volume_drag && (i.volume_drag = !1) }), window.addEventListener("mousemove", function (e) { i.time_drag && i.updateTime(e), i.volume_drag && i.updateVolume(e) }), this.button_volume.addEventListener("click", function () { i.toggleMute() }), this.volume_seek_bar.addEventListener("click", function (e) { i.volume_positions = i.volume_seek_bar.getBoundingClientRect(), i.updateVolume(e) }), this.volume_seek_bar.addEventListener("mousedown", function () { i.volume_drag || (i.volume_positions = i.volume_seek_bar.getBoundingClientRect(), i.volume_drag = !0) }), this.button_fullscreen.addEventListener("click", function () { i.toggleFullscreen() }), this.video.addEventListener("dblclick", function () { i.toggleFullscreen() }), this.video.addEventListener("click", function () { i.toggleState(), i.video.paused ? (i.effect_play.classList.add("active"), i.effect_pause.classList.remove("active")) : (i.effect_pause.classList.add("active"), i.effect_play.classList.remove("active")) }), this.playlist_next.addEventListener("click", function () { i.playlist_index < i.playlist_items.length - 5 && (i.playlist_index++ , console.log(i.playlist_index), console.log("next"), i.updatePlaylist(), i.playlist_prev.classList.remove("hide"), i.playlist_index == i.playlist_items.length - 5 && i.playlist_next.classList.add("hide")) }), this.playlist_prev.addEventListener("click", function () { i.playlist_index > 0 && (i.playlist_index-- , console.log(i.playlist_index), console.log("prev"), i.updatePlaylist(), i.playlist_next.classList.remove("hide"), 0 == i.playlist_index && i.playlist_prev.classList.add("hide")) }), window.addEventListener("resize", function () { i.playlist_item_width = i.playlist_items[0].getBoundingClientRect().width + 20, i.updatePlaylist() }) } return _createClass(e, [{ key: "init", value: function () { var e = this; this.video.addEventListener("loadeddata", function () { e.video.pause(), e.video.currentTime = 0, e.time_duration.textContent = e.formatTime(e.video.duration), e.time_current.textContent = e.formatTime(e.video.currentTime), e.time_seek_bar_fill.style.transform = "scaleX(0)" }) } }, { key: "toggleState", value: function () { this.video.paused ? (this.video.play(), this.container.classList.add("playing"), this.render()) : (this.video.pause(), this.container.classList.remove("playing")), this.effect_pause.classList.remove("active"), this.effect_play.classList.remove("active") } }, { key: "updateTime", value: function (e) { var t = (e.pageX - this.time_positions.left) / this.time_positions.width; this.time_seek_bar_fill.style.transform = "scaleX(" + t + ")", this.video.currentTime = t * this.video.duration, this.time_current.textContent = this.formatTime(this.video.currentTime) } }, { key: "updateVolume", value: function (e) { var t = (e.pageX - this.volume_positions.left) / this.volume_positions.width; this.video.volume = t, this.volume_seek_bar_fill.style.transform = "scaleX(" + t + ")", this.video.muted && this.toggleMute(), t >= .5 ? (this.button_volume.classList.add("volume-2"), this.button_volume.classList.remove("volume-1"), this.button_volume.classList.remove("volume-0")) : t < .5 && t >= .25 ? (this.button_volume.classList.remove("volume-2"), this.button_volume.classList.add("volume-1"), this.button_volume.classList.remove("volume-0")) : t < .25 ? (this.button_volume.classList.remove("volume-2"), this.button_volume.classList.remove("volume-1"), this.button_volume.classList.add("volume-0")) : t <= 0 && (this.button_volume.classList.remove("volume-2"), this.button_volume.classList.remove("volume-1"), this.button_volume.classList.remove("volume-0"), this.toggleMute()) } }, { key: "toggleMute", value: function () { this.video.muted ? (this.video.muted = !1, this.button_volume.classList.remove("mute"), this.volume_seek_bar_fill.style.transform = "scaleX(" + this.video.volume + ")") : (this.video.muted = !0, this.button_volume.classList.add("mute"), this.volume_seek_bar_fill.style.transform = "scaleX(0)") } }, { key: "toggleFullscreen", value: function () { null == document.fullscreenElement && null == document.mozFullscreenElement && null == document.webkitFullscreenElement && null == document.msFullscreenElement ? this.container.requestFullscreen ? this.container.requestFullscreen() : this.container.mozRequestFullScreen ? this.container.mozRequestFullScreen() : this.container.webkitRequestFullscreen ? this.container.webkitRequestFullscreen() : this.container.msRequestFullscreen && this.container.msRequestFullscreen() : document.exitFullscreen ? document.exitFullscreen() : document.mozExitFullScreen ? document.mozExitFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen() } }, { key: "updatePlaylist", value: function () { this.container_playlist.style.transform = "translateX(-" + this.playlist_index * this.playlist_item_width + "px)" } }, { key: "render", value: function () { this.video.paused || window.requestAnimationFrame(this.render.bind(this)); var e = this.video.currentTime / this.video.duration; this.time_seek_bar_fill.style.transform = "scaleX(" + e + ")", this.time_current.textContent = this.formatTime(this.video.currentTime), this.video.currentTime == this.video.duration && this.container.classList.remove("playing") } }, { key: "formatTime", value: function (e) { e = Math.round(e); var t = Math.floor(e / 3600), i = Math.floor((e - 3600 * t) / 60), s = e - 3600 * t - 60 * i; return t = t < 10 ? "0" + t : t, i = i < 10 ? "0" + i : i, s = s < 10 ? "0" + s : s, 0 != t ? t + ":" + i + ":" + s : i + ":" + s } }]), e }(), burger_button = document.querySelector(".header-burger"), burger_nav = document.querySelector(".header-nav"); burger_button.addEventListener("click", function () { burger_button.classList.toggle("header-burger-active"), burger_nav.classList.toggle("header-nav-expand") }); for (var exhibitions_buttons_item = document.querySelectorAll(".section-exhibitions-container-slider-nav-list--item"), exhibitions_buttons_container = document.querySelector(".section-exhibitions-container-slider-nav-list"), exhibitions_list_img = document.querySelector(".section-exhibitions-container-slider-wrapper-list"), exhibitions_list_content = document.querySelector(".section-exhibitions-container-content-wrapper-list"), exhibitions_last_index = 0, i = 0; i < exhibitions_buttons_item.length; i++)exhibitions_buttons_item[i].addEventListener("click", function () { var e = Array.prototype.indexOf.call(exhibitions_buttons_item, this); void 0 != exhibitions_buttons_item[exhibitions_last_index] && exhibitions_buttons_item[exhibitions_last_index].classList.remove("active"), exhibitions_last_index = e, exhibitions_buttons_item[e].classList.add("active"), window.innerWidth >= 900 ? (exhibitions_list_img.style.transform = "translateX(-" + 100 * e + "%)", exhibitions_list_content.style.transform = "translateX(-" + 100 * e + "%)") : (exhibitions_list_img.style.transform = "translateX(-" + 100 * e + "%)", exhibitions_list_content.style.transform = "translateX(-" + 100 * e + "%)", exhibitions_buttons_container.style.transform = "translateX(-" + (e - 1) / 3 * 100 + "%)") }); var controller = new Controller(document.querySelector(".section-videos-wrapper")); controller.init(), console.log(controller);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbnRyb2xsZXIuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbIkNvbnRyb2xsZXIiLCJjb250YWluZXIiLCJfdGhpcyIsInRoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJidXR0b25fdG9nZ2xlIiwicXVlcnlTZWxlY3RvciIsInZpZGVvIiwidGltZV9zZWVrX2JhciIsInRpbWVfc2Vla19iYXJfZmlsbCIsInRpbWVfZHJhZyIsInRpbWVfY3VycmVudCIsInRpbWVfZHVyYXRpb24iLCJidXR0b25fdm9sdW1lIiwidm9sdW1lX3NlZWtfYmFyIiwidm9sdW1lX3NlZWtfYmFyX2ZpbGwiLCJ2b2x1bWVfZHJhZyIsImVmZmVjdF9wYXVzZSIsImVmZmVjdF9wbGF5IiwiYnV0dG9uX2Z1bGxzY3JlZW4iLCJjb250YWluZXJfcGxheWxpc3QiLCJkb2N1bWVudCIsInBsYXlsaXN0X2l0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsInBsYXlsaXN0X25leHQiLCJwbGF5bGlzdF9wcmV2IiwicGxheWxpc3RfaW5kZXgiLCJwbGF5bGlzdF9pdGVtX3dpZHRoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJhZGRFdmVudExpc3RlbmVyIiwidG9nZ2xlU3RhdGUiLCJlIiwidGltZV9wb3NpdGlvbnMiLCJ1cGRhdGVUaW1lIiwid2luZG93IiwidXBkYXRlVm9sdW1lIiwidG9nZ2xlTXV0ZSIsInZvbHVtZV9wb3NpdGlvbnMiLCJ0b2dnbGVGdWxsc2NyZWVuIiwicGF1c2VkIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZVBsYXlsaXN0IiwiX3RoaXMyIiwicGF1c2UiLCJjdXJyZW50VGltZSIsInRleHRDb250ZW50IiwiZm9ybWF0VGltZSIsImR1cmF0aW9uIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJwbGF5IiwicmVuZGVyIiwicmF0aW8iLCJwYWdlWCIsImxlZnQiLCJ2b2x1bWUiLCJtdXRlZCIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbHNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJtc1JlcXVlc3RGdWxsc2NyZWVuIiwiZXhpdEZ1bGxzY3JlZW4iLCJtb3pFeGl0RnVsbFNjcmVlbiIsIndlYmtpdEV4aXRGdWxsc2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImJpbmQiLCJ0aW1lIiwiTWF0aCIsInJvdW5kIiwiaG91cnMiLCJmbG9vciIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiYnVyZ2VyX2J1dHRvbiIsImJ1cmdlcl9uYXYiLCJ0b2dnbGUiLCJleGhpYml0aW9uc19idXR0b25zX2l0ZW0iLCJleGhpYml0aW9uc19idXR0b25zX2NvbnRhaW5lciIsImV4aGliaXRpb25zX2xpc3RfaW1nIiwiZXhoaWJpdGlvbnNfbGlzdF9jb250ZW50IiwiZXhoaWJpdGlvbnNfbGFzdF9pbmRleCIsImkiLCJpbmRleCIsIkFycmF5IiwicHJvdG90eXBlIiwiaW5kZXhPZiIsImNhbGwiLCJ1bmRlZmluZWQiLCJpbm5lcldpZHRoIiwiY29udHJvbGxlciIsImluaXQiXSwibWFwcGluZ3MiOiI2WEFBTUEsV0FBQUEsV0FDSixTQUFBQSxFQUFZQyxHQUFVLElBQUFDLEVBQUFDLEtBQUFDLGdCQUFBRCxLQUFBSCxHQUNwQkcsS0FBS0YsVUFBZ0JBLEVBQ3JCRSxLQUFLRSxjQUFnQkYsS0FBS0YsVUFBVUssY0FBYyw0Q0FDbERILEtBQUtJLE1BQWdCSixLQUFLRixVQUFVSyxjQUFjLGlDQUVsREgsS0FBS0ssY0FBcUJMLEtBQUtGLFVBQVVLLGNBQWMsNkNBQ3ZESCxLQUFLTSxtQkFBcUJOLEtBQUtLLGNBQWNGLGNBQWMsbURBQzNESCxLQUFLTyxXQUFZLEVBRWpCUCxLQUFLUSxhQUFnQlIs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QUFZLGdCQUFtQnNDLEVBQU0sR0FBRyxFQUFLLElBQU0sUUFNN0YsSUFBTU8sV0FBYSxJQUFJcEcsV0FBV3FCLFNBQVNmLGNBQWMsNEJBQ3pEOEYsV0FBV0MsT0FFWHhELFFBQVFDLElBQUlzRCIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIENvbnRyb2xsZXJ7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcil7XG4gICAgdGhpcy5jb250YWluZXIgICAgID0gY29udGFpbmVyXG4gICAgdGhpcy5idXR0b25fdG9nZ2xlID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtLXRvZ2dsZScpXG4gICAgdGhpcy52aWRlbyAgICAgICAgID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItdmlkZW8nKVxuICAgIFxuICAgIHRoaXMudGltZV9zZWVrX2JhciAgICAgID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtc2Vlay1iYXInKVxuICAgIHRoaXMudGltZV9zZWVrX2Jhcl9maWxsID0gdGhpcy50aW1lX3NlZWtfYmFyLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy13cmFwcGVyLWNvbnRyb2xzLXNlZWstYmFyLS1maWxsJylcbiAgICB0aGlzLnRpbWVfZHJhZyA9IGZhbHNlXG5cbiAgICB0aGlzLnRpbWVfY3VycmVudCAgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlci1jb250cm9scy0tdGltZS1jdXJyZW50JylcbiAgICB0aGlzLnRpbWVfZHVyYXRpb24gPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlci1jb250cm9scy0tdGltZS1kdXJhdGlvbicpXG4gICAgXG4gICAgdGhpcy5idXR0b25fdm9sdW1lID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtdm9sdW1lLS1pY29uJylcbiAgICB0aGlzLnZvbHVtZV9zZWVrX2JhciAgICAgID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtdm9sdW1lLS1iYXInKVxuICAgIHRoaXMudm9sdW1lX3NlZWtfYmFyX2ZpbGwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlci1jb250cm9scy12b2x1bWUtLWJhci1maWxsJylcbiAgICB0aGlzLnZvbHVtZV9kcmFnID0gZmFsc2VcblxuICAgIHRoaXMuZWZmZWN0X3BhdXNlID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItZWZmZWN0LXBhdXNlJylcbiAgICB0aGlzLmVmZmVjdF9wbGF5ICA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy13cmFwcGVyLWVmZmVjdC1wbGF5JylcbiAgICBcbiAgICB0aGlzLmJ1dHRvbl9mdWxsc2NyZWVuID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLXdyYXBwZXItY29udHJvbHMtLWZ1bGxzY3JlZW4nKVxuXG4gICAgdGhpcy5jb250YWluZXJfcGxheWxpc3QgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tdmlkZW9zLW5hdi13cmFwcGVyLWxpc3QnKVxuICAgIHRoaXMucGxheWxpc3RfaXRlbXMgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uLXZpZGVvcy1uYXYtd3JhcHBlci1saXN0LWl0ZW0nKVxuICAgIHRoaXMucGxheWxpc3RfbmV4dCAgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy1uYXYtY29udHJvbHMtLW5leHQnKVxuICAgIHRoaXMucGxheWxpc3RfcHJldiAgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLXZpZGVvcy1uYXYtY29udHJvbHMtLXByZXYnKVxuICAgIHRoaXMucGxheWxpc3RfaW5kZXggICAgICA9IDBcbiAgICB0aGlzLnBsYXlsaXN0X2l0ZW1fd2lkdGggPSB0aGlzLnBsYXlsaXN0X2l0ZW1zWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgMjBcblxuICAgIHRoaXMuYnV0dG9uX3RvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICB0aGlzLnRvZ2dsZVN0YXRlKClcbiAgICB9KVxuXG4gICAgdGhpcy50aW1lX3NlZWtfYmFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpPT57XG4gICAgICB0aGlzLnRpbWVfcG9zaXRpb25zID0gdGhpcy50aW1lX3NlZWtfYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICBcbiAgICAgIHRoaXMudXBkYXRlVGltZShlKVxuICAgIH0pXG5cbiAgICB0aGlzLnRpbWVfc2Vla19iYXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCk9PntcbiAgICAgIGlmKCF0aGlzLnRpbWVfZHJhZyl7XG4gICAgICAgIHRoaXMudGltZV9wb3NpdGlvbnMgPSB0aGlzLnRpbWVfc2Vla19iYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgICAgICBcbiAgICAgICAgdGhpcy50aW1lX2RyYWcgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCk9PntcbiAgICAgIGlmKHRoaXMudGltZV9kcmFnKXtcbiAgICAgICAgdGhpcy50aW1lX2RyYWcgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLnZvbHVtZV9kcmFnKXtcbiAgICAgICAgdGhpcy52b2x1bWVfZHJhZyA9IGZhbHNlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSk9PntcbiAgICAgIGlmKHRoaXMudGltZV9kcmFnKXtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lKGUpXG4gICAgICB9XG4gICAgICBpZih0aGlzLnZvbHVtZV9kcmFnKXtcbiAgICAgICAgdGhpcy51cGRhdGVWb2x1bWUoZSkgICAgICAgIFxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmJ1dHRvbl92b2x1bWUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntcbiAgICAgIHRoaXMudG9nZ2xlTXV0ZSgpXG4gICAgfSlcblxuICAgIHRoaXMudm9sdW1lX3NlZWtfYmFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+e1xuICAgICAgdGhpcy52b2x1bWVfcG9zaXRpb25zID0gdGhpcy52b2x1bWVfc2Vla19iYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIHRoaXMudXBkYXRlVm9sdW1lKGUpXG4gICAgfSlcblxuICAgIHRoaXMudm9sdW1lX3NlZWtfYmFyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpPT57XG4gICAgICBpZighdGhpcy52b2x1bWVfZHJhZyl7XG4gICAgICAgIHRoaXMudm9sdW1lX3Bvc2l0aW9ucyA9IHRoaXMudm9sdW1lX3NlZWtfYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpICAgICAgXG4gICAgICAgIHRoaXMudm9sdW1lX2RyYWcgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuYnV0dG9uX2Z1bGxzY3JlZW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgdGhpcy50b2dnbGVGdWxsc2NyZWVuKClcbiAgICB9KVxuXG4gICAgdGhpcy52aWRlby5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsICgpPT57XG4gICAgICB0aGlzLnRvZ2dsZUZ1bGxzY3JlZW4oKSAgICAgIFxuICAgIH0pXG5cbiAgICB0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgIHRoaXMudG9nZ2xlU3RhdGUoKVxuICAgICAgaWYodGhpcy52aWRlby5wYXVzZWQpe1xuICAgICAgICB0aGlzLmVmZmVjdF9wbGF5LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgIHRoaXMuZWZmZWN0X3BhdXNlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICB0aGlzLmVmZmVjdF9wYXVzZS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICAgICAgICB0aGlzLmVmZmVjdF9wbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpICAgICAgICBcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5wbGF5bGlzdF9uZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgIGlmKHRoaXMucGxheWxpc3RfaW5kZXggPCB0aGlzLnBsYXlsaXN0X2l0ZW1zLmxlbmd0aCAtIDUpe1xuICAgICAgICB0aGlzLnBsYXlsaXN0X2luZGV4KytcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5wbGF5bGlzdF9pbmRleClcbiAgICAgICAgY29uc29sZS5sb2coJ25leHQnKVxuICAgICAgICB0aGlzLnVwZGF0ZVBsYXlsaXN0KClcbiAgICAgICAgdGhpcy5wbGF5bGlzdF9wcmV2LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgICAgICBpZih0aGlzLnBsYXlsaXN0X2luZGV4ICA9PSB0aGlzLnBsYXlsaXN0X2l0ZW1zLmxlbmd0aCAtIDUpe1xuICAgICAgICAgIHRoaXMucGxheWxpc3RfbmV4dC5jbGFzc0xpc3QuYWRkKCdoaWRlJykgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5wbGF5bGlzdF9wcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgIGlmKHRoaXMucGxheWxpc3RfaW5kZXggPiAwKXtcbiAgICAgICAgdGhpcy5wbGF5bGlzdF9pbmRleC0tXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGxheWxpc3RfaW5kZXgpICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ3ByZXYnKVxuICAgICAgICB0aGlzLnVwZGF0ZVBsYXlsaXN0KClcbiAgICAgICAgdGhpcy5wbGF5bGlzdF9uZXh0LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKSBcbiAgICAgICAgaWYodGhpcy5wbGF5bGlzdF9pbmRleCA9PSAwKXtcbiAgICAgICAgICB0aGlzLnBsYXlsaXN0X3ByZXYuY2xhc3NMaXN0LmFkZCgnaGlkZScpICAgICAgICAgIFxuICAgICAgICB9ICAgICBcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpPT57XG4gICAgICB0aGlzLnBsYXlsaXN0X2l0ZW1fd2lkdGggPSB0aGlzLnBsYXlsaXN0X2l0ZW1zWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgMjAgICAgICBcbiAgICAgIHRoaXMudXBkYXRlUGxheWxpc3QoKVxuICAgIH0pXG4gIH1cblxuICAvLyBpbml0IG5ldyB2aWRlb1xuICBpbml0KCl7XG4gICAgdGhpcy52aWRlby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRkYXRhJywgKCkgPT57XG4gICAgICB0aGlzLnZpZGVvLnBhdXNlKClcbiAgICAgIHRoaXMudmlkZW8uY3VycmVudFRpbWUgPSAwXG4gICAgICB0aGlzLnRpbWVfZHVyYXRpb24udGV4dENvbnRlbnQgPSB0aGlzLmZvcm1hdFRpbWUodGhpcy52aWRlby5kdXJhdGlvbikgICBcbiAgICAgIHRoaXMudGltZV9jdXJyZW50LnRleHRDb250ZW50ID0gdGhpcy5mb3JtYXRUaW1lKHRoaXMudmlkZW8uY3VycmVudFRpbWUpICAgICAgIFxuICAgICAgXG4gICAgICB0aGlzLnRpbWVfc2Vla19iYXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKDApJyAgICBcbiAgICB9KSAgICBcbiAgfVxuXG5cbiAgLy91cGRhdGUgZnVuY1xuICB0b2dnbGVTdGF0ZSgpe1xuICAgIGlmKHRoaXMudmlkZW8ucGF1c2VkKXtcbiAgICAgIHRoaXMudmlkZW8ucGxheSgpXG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwbGF5aW5nJylcbiAgICAgIHRoaXMucmVuZGVyKClcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHRoaXMudmlkZW8ucGF1c2UoKVxuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgncGxheWluZycpXG4gICAgfVxuICAgIHRoaXMuZWZmZWN0X3BhdXNlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgdGhpcy5lZmZlY3RfcGxheS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICB9XG5cbiAgdXBkYXRlVGltZShlKXtcbiAgICBsZXQgcmF0aW8gPSAoZS5wYWdlWCAtIHRoaXMudGltZV9wb3NpdGlvbnMubGVmdCkgLyB0aGlzLnRpbWVfcG9zaXRpb25zLndpZHRoXG4gICAgdGhpcy50aW1lX3NlZWtfYmFyX2ZpbGwuc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlWCgnKyByYXRpbyArJyknXG4gICAgdGhpcy52aWRlby5jdXJyZW50VGltZSA9IHJhdGlvICogdGhpcy52aWRlby5kdXJhdGlvblxuICAgIHRoaXMudGltZV9jdXJyZW50LnRleHRDb250ZW50ID0gdGhpcy5mb3JtYXRUaW1lKHRoaXMudmlkZW8uY3VycmVudFRpbWUpXG4gIH1cblxuICB1cGRhdGVWb2x1bWUoZSl7XG4gICAgbGV0IHJhdGlvID0gKGUucGFnZVggLSB0aGlzLnZvbHVtZV9wb3NpdGlvbnMubGVmdCkgLyB0aGlzLnZvbHVtZV9wb3NpdGlvbnMud2lkdGhcbiAgICB0aGlzLnZpZGVvLnZvbHVtZSA9IHJhdGlvXG4gICAgdGhpcy52b2x1bWVfc2Vla19iYXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKCcrIHJhdGlvICsnKScgICAgXG4gICAgaWYodGhpcy52aWRlby5tdXRlZCl7XG4gICAgICB0aGlzLnRvZ2dsZU11dGUoKVxuICAgIH1cblxuICAgIGlmKHJhdGlvID49IC41KXtcbiAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QuYWRkKCd2b2x1bWUtMicpXG4gICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTEnKVxuICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5yZW1vdmUoJ3ZvbHVtZS0wJylcbiAgICB9XG4gICAgZWxzZSBpZihyYXRpbyA8IC41ICYmIHJhdGlvID49IC4yNSl7XG4gICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTInKVxuICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5hZGQoJ3ZvbHVtZS0xJylcbiAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QucmVtb3ZlKCd2b2x1bWUtMCcpXG4gICAgfVxuICAgIGVsc2UgaWYocmF0aW8gPCAuMjUpe1xuICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5yZW1vdmUoJ3ZvbHVtZS0yJylcbiAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QucmVtb3ZlKCd2b2x1bWUtMScpXG4gICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LmFkZCgndm9sdW1lLTAnKVxuICAgIH1cbiAgICBlbHNlIGlmKHJhdGlvIDw9IDApe1xuICAgICAgdGhpcy5idXR0b25fdm9sdW1lLmNsYXNzTGlzdC5yZW1vdmUoJ3ZvbHVtZS0yJylcbiAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QucmVtb3ZlKCd2b2x1bWUtMScpXG4gICAgICB0aGlzLmJ1dHRvbl92b2x1bWUuY2xhc3NMaXN0LnJlbW92ZSgndm9sdW1lLTAnKVxuICAgICAgdGhpcy50b2dnbGVNdXRlKClcbiAgICB9XG4gIH1cblxuICB0b2dnbGVNdXRlKCl7XG4gICAgaWYodGhpcy52aWRlby5tdXRlZCl7XG4gICAgICB0aGlzLnZpZGVvLm11dGVkID0gZmFsc2VcbiAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QucmVtb3ZlKCdtdXRlJylcbiAgICAgIHRoaXMudm9sdW1lX3NlZWtfYmFyX2ZpbGwuc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlWCgnKyB0aGlzLnZpZGVvLnZvbHVtZSArJyknICAgICAgICAgIFxuICAgIH1cbiAgICBlbHNle1xuICAgICAgdGhpcy52aWRlby5tdXRlZCA9IHRydWVcbiAgICAgIHRoaXMuYnV0dG9uX3ZvbHVtZS5jbGFzc0xpc3QuYWRkKCdtdXRlJylcbiAgICAgIHRoaXMudm9sdW1lX3NlZWtfYmFyX2ZpbGwuc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlWCgwKScgICAgXG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlRnVsbHNjcmVlbigpe1xuICAgIGlmKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50ID09IG51bGwgJibCoGRvY3VtZW50Lm1vekZ1bGxzY3JlZW5FbGVtZW50ID09IG51bGwgJibCoGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ID09IG51bGwgJiYgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudD09IG51bGwgKXtcbiAgICAgIGlmKHRoaXMuY29udGFpbmVyLnJlcXVlc3RGdWxsc2NyZWVuKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVxdWVzdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZih0aGlzLmNvbnRhaW5lci5tb3pSZXF1ZXN0RnVsbFNjcmVlbil7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLm1velJlcXVlc3RGdWxsU2NyZWVuKClcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYodGhpcy5jb250YWluZXIud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pe1xuICAgICAgICB0aGlzLmNvbnRhaW5lci53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpXG4gICAgICB9XG4gICAgICBlbHNlIGlmKHRoaXMuY29udGFpbmVyLm1zUmVxdWVzdEZ1bGxzY3JlZW4pe1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5tc1JlcXVlc3RGdWxsc2NyZWVuKClcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIGlmKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKXtcbiAgICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgICAgZWxzZSBpZihkb2N1bWVudC5tb3pFeGl0RnVsbFNjcmVlbil7XG4gICAgICAgIGRvY3VtZW50Lm1vekV4aXRGdWxsU2NyZWVuKClcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pe1xuICAgICAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpXG4gICAgICB9XG4gICAgICBlbHNlIGlmKGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pe1xuICAgICAgICBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL3BsYXlsaXN0XG4gIHVwZGF0ZVBsYXlsaXN0KCl7XG4gICAgdGhpcy5jb250YWluZXJfcGxheWxpc3Quc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLScrICh0aGlzLnBsYXlsaXN0X2luZGV4ICogdGhpcy5wbGF5bGlzdF9pdGVtX3dpZHRoKSArJ3B4KSdcbiAgfSAgXG5cblxuICAvL3JlbmRlciBmdW5jXG4gIHJlbmRlcigpe1xuICAgIGlmKCF0aGlzLnZpZGVvLnBhdXNlZCl7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVuZGVyLmJpbmQodGhpcykpXG4gICAgfVxuXG4gICAgbGV0IHJhdGlvID0gdGhpcy52aWRlby5jdXJyZW50VGltZSAvIHRoaXMudmlkZW8uZHVyYXRpb25cbiAgICB0aGlzLnRpbWVfc2Vla19iYXJfZmlsbC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKCcrIHJhdGlvICsnKSdcblxuICAgIHRoaXMudGltZV9jdXJyZW50LnRleHRDb250ZW50ID0gdGhpcy5mb3JtYXRUaW1lKHRoaXMudmlkZW8uY3VycmVudFRpbWUpXG4gICAgXG4gICAgaWYodGhpcy52aWRlby5jdXJyZW50VGltZSA9PSB0aGlzLnZpZGVvLmR1cmF0aW9uKXtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXlpbmcnKSAgICAgIFxuICAgIH1cbiAgfVxuXG5cbiAgLy8gdXNlZnVsbCBmdW5jXG4gIGZvcm1hdFRpbWUodGltZSl7XG4gICAgdGltZSAgPSBNYXRoLnJvdW5kKHRpbWUpXG4gICAgbGV0IGhvdXJzICAgPSBNYXRoLmZsb29yKHRpbWUgLyAzNjAwKTtcbiAgICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoKHRpbWUgLSAoaG91cnMgKiAzNjAwKSkgLyA2MCk7XG4gICAgbGV0IHNlY29uZHMgPSB0aW1lIC0gKGhvdXJzICogMzYwMCkgLSAobWludXRlcyAqIDYwKTtcblxuICAgIGhvdXJzICAgPSBob3VycyAgIDwgMTAgPyBcIjBcIitob3VycyA6IGhvdXJzXG4gICAgbWludXRlcyA9IG1pbnV0ZXMgPCAxMCA/IFwiMFwiK21pbnV0ZXMgOiBtaW51dGVzXG4gICAgc2Vjb25kcyA9IHNlY29uZHMgPCAxMCA/IFwiMFwiK3NlY29uZHMgOiBzZWNvbmRzXG5cbiAgICBpZihob3VycyAhPSAwKXtcbiAgICAgIHJldHVybiBob3VycysnOicrbWludXRlcysnOicrc2Vjb25kc1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgcmV0dXJuIG1pbnV0ZXMrJzonK3NlY29uZHNcbiAgICB9XG4gIH1cbn0iLCJjb25zdCBidXJnZXJfYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci1idXJnZXInKVxuY29uc3QgYnVyZ2VyX25hdiAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItbmF2JylcblxuYnVyZ2VyX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gIGJ1cmdlcl9idXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgnaGVhZGVyLWJ1cmdlci1hY3RpdmUnKVxuICBidXJnZXJfbmF2LmNsYXNzTGlzdC50b2dnbGUoJ2hlYWRlci1uYXYtZXhwYW5kJylcbn0pXG5cblxuXG5jb25zdCBleGhpYml0aW9uc19idXR0b25zX2l0ZW0gICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uLWV4aGliaXRpb25zLWNvbnRhaW5lci1zbGlkZXItbmF2LWxpc3QtLWl0ZW0nKVxuY29uc3QgZXhoaWJpdGlvbnNfYnV0dG9uc19jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1leGhpYml0aW9ucy1jb250YWluZXItc2xpZGVyLW5hdi1saXN0JylcbmNvbnN0IGV4aGliaXRpb25zX2xpc3RfaW1nICAgICAgICAgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tZXhoaWJpdGlvbnMtY29udGFpbmVyLXNsaWRlci13cmFwcGVyLWxpc3QnKVxuY29uc3QgZXhoaWJpdGlvbnNfbGlzdF9jb250ZW50ICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1leGhpYml0aW9ucy1jb250YWluZXItY29udGVudC13cmFwcGVyLWxpc3QnKVxubGV0IGV4aGliaXRpb25zX2xhc3RfaW5kZXggICAgICAgICAgPSAwXG5cbmZvciAodmFyIGkgPSAwOyBpIDwgZXhoaWJpdGlvbnNfYnV0dG9uc19pdGVtLmxlbmd0aDsgaSsrKSB7XG4gIGV4aGliaXRpb25zX2J1dHRvbnNfaXRlbVtpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgbGV0IGluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChleGhpYml0aW9uc19idXR0b25zX2l0ZW0sIHRoaXMpXG5cbiAgICBpZihleGhpYml0aW9uc19idXR0b25zX2l0ZW1bZXhoaWJpdGlvbnNfbGFzdF9pbmRleF0gIT0gdW5kZWZpbmVkKXtcbiAgICAgIGV4aGliaXRpb25zX2J1dHRvbnNfaXRlbVtleGhpYml0aW9uc19sYXN0X2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgIH1cbiAgICBleGhpYml0aW9uc19sYXN0X2luZGV4ID0gaW5kZXhcblxuICAgIGV4aGliaXRpb25zX2J1dHRvbnNfaXRlbVtpbmRleF0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcblxuICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoID49IDkwMCl7XG4gICAgICBleGhpYml0aW9uc19saXN0X2ltZy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgtJysgKGluZGV4ICogMTAwKSArJyUpJ1xuICAgICAgZXhoaWJpdGlvbnNfbGlzdF9jb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKC0nKyAoaW5kZXggKiAxMDApICsnJSknXG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBleGhpYml0aW9uc19saXN0X2ltZy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgtJysgKGluZGV4ICogMTAwKSArJyUpJ1xuICAgICAgZXhoaWJpdGlvbnNfbGlzdF9jb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKC0nKyAoaW5kZXggKiAxMDApICsnJSknXG4gICAgICBleGhpYml0aW9uc19idXR0b25zX2NvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgtJysgKCgoaW5kZXgtMSkvMykgKiAxMDApICsnJSknXG4gICAgfVxuXG4gIH0pXG59XG5cbmNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi12aWRlb3Mtd3JhcHBlcicpKVxuY29udHJvbGxlci5pbml0KClcblxuY29uc29sZS5sb2coY29udHJvbGxlcikiXX0=