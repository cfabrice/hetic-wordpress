"use strict";

function _classCallCheck(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
}
var _createClass = function () {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var s = t[i];
                s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, s.key, s)
            }
        }
        return function (t, i, s) {
            return i && e(t.prototype, i), s && e(t, s), t
        }
    }(),
    Player = function () {
        function e(t) {
            var i = this,
                s = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (_classCallCheck(this, e), this.container = t, this.button_toggle = this.container.querySelector(".section-videos-wrapper-controls--toggle"), this.video = this.container.querySelector(".section-videos-wrapper-video"), this.time_seek_bar = this.container.querySelector(".section-videos-wrapper-controls-seek-bar"), this.time_seek_bar_fill = this.time_seek_bar.querySelector(".section-videos-wrapper-controls-seek-bar--fill"), this.time_drag = !1, this.time_current = this.container.querySelector(".section-videos-wrapper-controls--time-current"), this.time_duration = this.container.querySelector(".section-videos-wrapper-controls--time-duration"), this.button_volume = this.container.querySelector(".section-videos-wrapper-controls-volume--icon"), this.volume_seek_bar = this.container.querySelector(".section-videos-wrapper-controls-volume--bar"), this.volume_seek_bar_fill = this.container.querySelector(".section-videos-wrapper-controls-volume--bar-fill"), this.volume_drag = !1, this.effect_pause = this.container.querySelector(".section-videos-wrapper-effect-pause"), this.effect_play = this.container.querySelector(".section-videos-wrapper-effect-play"), this.button_fullscreen = this.container.querySelector(".section-videos-wrapper-controls--fullscreen"), this.button_toggle.addEventListener("click", function () {
                    i.toggleState()
                }), this.time_seek_bar.addEventListener("click", function (e) {
                    i.time_positions = i.time_seek_bar.getBoundingClientRect(), i.updateTime(e)
                }), this.time_seek_bar.addEventListener("mousedown", function () {
                    i.time_drag || (i.time_positions = i.time_seek_bar.getBoundingClientRect(), i.time_drag = !0)
                }), window.addEventListener("mouseup", function () {
                    i.time_drag && (i.time_drag = !1), i.volume_drag && (i.volume_drag = !1)
                }), window.addEventListener("mousemove", function (e) {
                    i.time_drag && i.updateTime(e), i.volume_drag && i.updateVolume(e)
                }), this.button_volume.addEventListener("click", function () {
                    i.toggleMute()
                }), this.volume_seek_bar.addEventListener("click", function (e) {
                    i.volume_positions = i.volume_seek_bar.getBoundingClientRect(), i.updateVolume(e)
                }), this.volume_seek_bar.addEventListener("mousedown", function () {
                    i.volume_drag || (i.volume_positions = i.volume_seek_bar.getBoundingClientRect(), i.volume_drag = !0)
                }), this.button_fullscreen.addEventListener("click", function () {
                    i.toggleFullscreen()
                }), this.video.addEventListener("dblclick", function () {
                    i.toggleFullscreen()
                }), this.video.addEventListener("click", function () {
                    i.toggleState(), i.video.paused ? (i.effect_play.classList.add("active"), i.effect_pause.classList.remove("active")) : (i.effect_pause.classList.add("active"), i.effect_play.classList.remove("active"))
                }), this.playlist = s, this.playlist) {
                this.container_playlist = document.querySelector(".section-videos-nav-wrapper-list"), this.playlist_items = document.querySelectorAll(".section-videos-nav-wrapper-list-item"), this.playlist_next = document.querySelector(".section-videos-nav-controls--next"), this.playlist_prev = document.querySelector(".section-videos-nav-controls--prev"), this.playlist_index = 0, this.playlist_selected = this.playlist_items[this.playlist_index], this.playlist_item_width = this.playlist_items[0].getBoundingClientRect().width + 20, this.video_index = 0, this.video_prev = this.container.querySelector(".section-videos-wrapper-controls--skip-prev"), this.video_next = this.container.querySelector(".section-videos-wrapper-controls--skip-next"), this.playlist_next.addEventListener("click", function () {
                    i.playlist_index < i.playlist_items.length - i.playlist_size && (i.playlist_index++, i.updatePlaylist())
                }), this.playlist_prev.addEventListener("click", function () {
                    i.playlist_index > 0 && (i.playlist_index--, i.updatePlaylist())
                });
                for (var l = 0; l < this.playlist_items.length; l++) ! function () {
                    var e = i;
                    i.playlist_items[l].addEventListener("click", function () {
                        this != e.playlist_selected && (e.video_index = Array.prototype.indexOf.call(e.playlist_items, this), e.selectVideo())
                    })
                }();
                this.video_prev.addEventListener("click", function () {
                    i.video_index > 0 ? (i.video_index--, i.selectVideo()) : (i.video_prev.classList.add("hide"), console.log("nop prev")), i.video_next.classList.remove("hide")
                }), this.video_next.addEventListener("click", function () {
                    i.video_index < i.playlist_items.length - 1 ? (i.video_index++, i.selectVideo()) : (i.video_next.classList.add("hide"), console.log("nop next")), i.video_prev.classList.remove("hide")
                }), this.video.addEventListener("ended", function () {
                    i.video_index < i.playlist_items.length - 1 && (i.video_index++, i.selectVideo())
                }), this.initPlaylist()
            }
            window.addEventListener("resize", function () {
                i.playlist_item_width = i.playlist_items[0].getBoundingClientRect().width + 20, i.playlist && (console.log("resize"), i.initPlaylist())
            }), this.init()
        }
        return _createClass(e, [{
            key: "init",
            value: function () {
                var e = this;
                this.container.classList.remove("playing"), this.effect_pause.classList.remove("active"), this.effect_play.classList.remove("active"), this.video.addEventListener("loadeddata", function () {
                    e.video.currentTime = .45, e.time_duration.textContent = e.formatTime(e.video.duration), e.time_current.textContent = e.formatTime(e.video.currentTime), e.time_seek_bar_fill.style.transform = "scaleX(0)"
                })
            }
        }, {
            key: "initPlaylist",
            value: function () {
                var e = window.innerWidth;
                this.playlist_size = e < 425 ? 1 : e < 650 ? 2 : e < 900 ? 3 : e < 1300 ? 5 : e < 2500 ? 6 : 9, this.playlist_index = 0, this.updatePlaylist()
            }
        }, {
            key: "toggleState",
            value: function () {
                this.video.paused ? (this.video.play(), this.container.classList.add("playing"), this.render()) : (this.video.pause(), this.container.classList.remove("playing")), this.effect_pause.classList.remove("active"), this.effect_play.classList.remove("active")
            }
        }, {
            key: "updateTime",
            value: function (e) {
                var t = (e.pageX - this.time_positions.left) / this.time_positions.width;
                t >= 0 && t < 1 && (this.time_seek_bar_fill.style.transform = "scaleX(" + t + ")", this.video.currentTime = t * this.video.duration, this.time_current.textContent = this.formatTime(this.video.currentTime))
            }
        }, {
            key: "updateVolume",
            value: function (e) {
                var t = (e.pageX - this.volume_positions.left) / this.volume_positions.width;
                t >= 0 && t < 1 && (this.video.volume = t, this.volume_seek_bar_fill.style.transform = "scaleX(" + t + ")", this.video.muted && this.toggleMute(), t >= .5 ? (this.button_volume.classList.add("volume-2"), this.button_volume.classList.remove("volume-1"), this.button_volume.classList.remove("volume-0")) : t < .5 && t >= .25 ? (this.button_volume.classList.remove("volume-2"), this.button_volume.classList.add("volume-1"), this.button_volume.classList.remove("volume-0")) : t < .25 ? (this.button_volume.classList.remove("volume-2"), this.button_volume.classList.remove("volume-1"), this.button_volume.classList.add("volume-0")) : t <= 0 && (this.button_volume.classList.remove("volume-2"), this.button_volume.classList.remove("volume-1"), this.button_volume.classList.remove("volume-0"), this.toggleMute()))
            }
        }, {
            key: "toggleMute",
            value: function () {
                this.video.muted ? (this.video.muted = !1, this.button_volume.classList.remove("mute"), this.volume_seek_bar_fill.style.transform = "scaleX(" + this.video.volume + ")") : (this.video.muted = !0, this.button_volume.classList.add("mute"), this.volume_seek_bar_fill.style.transform = "scaleX(0)")
            }
        }, {
            key: "toggleFullscreen",
            value: function () {
                null == document.fullscreenElement && null == document.mozFullscreenElement && null == document.webkitFullscreenElement && null == document.msFullscreenElement ? this.container.requestFullscreen ? this.container.requestFullscreen() : this.container.mozRequestFullScreen ? this.container.mozRequestFullScreen() : this.container.webkitRequestFullscreen ? this.container.webkitRequestFullscreen() : this.container.msRequestFullscreen && this.container.msRequestFullscreen() : document.exitFullscreen ? document.exitFullscreen() : document.mozExitFullScreen ? document.mozExitFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen()
            }
        }, {
            key: "updatePlaylist",
            value: function () {
                this.container_playlist.style.transform = "translateX(-" + this.playlist_index * this.playlist_item_width + "px)", 0 == this.playlist_index ? this.playlist_prev.classList.add("hide") : this.playlist_prev.classList.remove("hide"), this.playlist_index >= this.playlist_items.length - this.playlist_size ? this.playlist_next.classList.add("hide") : this.playlist_next.classList.remove("hide")
            }
        }, {
            key: "selectVideo",
            value: function () {
                this.playlist_selected.classList.remove("active"), this.playlist_selected = this.playlist_items[this.video_index], this.playlist_selected.classList.add("active"), this.video.src = this.playlist_selected.dataset.target, this.init(), this.video_index > this.playlist_index + this.playlist_size - 1 ? (this.playlist_index++, this.updatePlaylist()) : this.video_index < this.playlist_index && (this.playlist_index--, this.updatePlaylist()), 0 == this.video_index ? this.video_prev.classList.add("hide") : this.video_prev.classList.remove("hide"), this.video_index >= this.playlist_items.length - 1 ? this.video_next.classList.add("hide") : this.video_next.classList.remove("hide")
            }
        }, {
            key: "render",
            value: function () {
                this.video.paused || window.requestAnimationFrame(this.render.bind(this));
                var e = this.video.currentTime / this.video.duration;
                this.time_seek_bar_fill.style.transform = "scaleX(" + e + ")", this.time_current.textContent = this.formatTime(this.video.currentTime), this.video.currentTime == this.video.duration && this.container.classList.remove("playing")
            }
        }, {
            key: "formatTime",
            value: function (e) {
                e = Math.round(e);
                var t = Math.floor(e / 3600),
                    i = Math.floor((e - 3600 * t) / 60),
                    s = e - 3600 * t - 60 * i;
                return t = t < 10 ? "0" + t : t, i = i < 10 ? "0" + i : i, s = s < 10 ? "0" + s : s, 0 != t ? t + ":" + i + ":" + s : i + ":" + s
            }
        }]), e
    }(),
    burger_button = document.querySelector(".header-burger"),
    burger_nav = document.querySelector(".header-nav");
burger_button.addEventListener("click", function () {
    burger_button.classList.toggle("header-burger-active"), burger_nav.classList.toggle("header-nav-expand")
});
var header = document.querySelector(".header"),
    header_hide = !1;
document.body.addEventListener("mousewheel", function (e) {
    !header_hide && e.deltaY < 0 && !scroll_disabled ? (header.classList.remove("hide"), header_hide = !0) : header_hide && e.deltaY > 0 && document.body.scrollTop > 80 && !scroll_disabled && (header.classList.add("hide"), header_hide = !1)
});
for (var disabled_elements = document.querySelectorAll(".scroll-disable"), scroll_disabled = !1, i = 0; i < disabled_elements.length; i++) disabled_elements[i].addEventListener("mouseenter", function () {
    scroll_disabled = !0
}), disabled_elements[i].addEventListener("mouseleave", function () {
    scroll_disabled = !1
});
if (void 0 != document.querySelector(".section-exhibitions")) {
    var i;
    ! function () {
        var e = document.querySelectorAll(".section-exhibitions-container-slider-nav-list--item"),
            t = document.querySelector(".section-exhibitions-container-slider-nav-list"),
            s = document.querySelector(".section-exhibitions-container-slider-wrapper-list"),
            l = document.querySelector(".section-exhibitions-container-content-wrapper-list"),
            n = 0;
        for (i = 0; i < e.length; i++) e[i].addEventListener("click", function () {
            var i = Array.prototype.indexOf.call(e, this);
            void 0 != e[n] && e[n].classList.remove("active"), n = i, e[i].classList.add("active"), window.innerWidth >= 900 ? (s.style.transform = "translateX(-" + 100 * i + "%)", l.style.transform = "translateX(-" + 100 * i + "%)") : (s.style.transform = "translateX(-" + 100 * i + "%)", l.style.transform = "translateX(-" + 100 * i + "%)", t.style.transform = "translateX(-" + (i - 1) / 3 * 100 + "%)")
        })
    }()
}
if (void 0 != document.querySelector(".section-videos-wrapper")) var player = new Player(document.querySelector(".section-videos-wrapper"), !0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,